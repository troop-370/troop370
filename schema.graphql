type ApiUsage {
  billable: Float!
  since: Date!
  total: Float!
}

type Billing {
  features: BillingFeatures!
  stripe_customer_id: String
  stripe_subscription_id: String
  subscription_active: Boolean!
  subscription_last_payment: String

  """Gets the usage to be used for billing"""
  usage: Usage!
}

type BillingFeatures {
  allowDiskUse: Boolean!
}

type Collection {
  _id: ObjectID!
  archived: Boolean!
  hidden: Boolean!
  history: [CollectionHistory]
  locked: Boolean!
  people: CollectionPeople
  timestamps: CollectionTimestamps
  yState: String
}

type CollectionActionAccess {
  archive: Boolean
  create: Boolean!

  """Only for the users collection"""
  deactivate: Boolean
  delete: Boolean!
  get: Boolean!
  hide: Boolean!
  lock: Boolean!
  modify: Boolean!

  """Only for collections that allow publishing"""
  publish: Boolean
  watch: Boolean!
}

type CollectionActivity {
  _id: ObjectID!
  action: String!
  at: Date!
  in: String!
  name: String
  user: User
}

type CollectionHistory {
  at: Date!
  type: String!
  user: User
}

type CollectionPeople {
  created_by: User
  last_modified_by: User
  modified_by: [User]
  watching: [User]
}

type CollectionPermissions {
  teams: [String]!
  users: [User]!
}

input CollectionPermissionsInput {
  teams: [ObjectID]
  users: [ObjectID]
}

type CollectionTimestamps {
  created_at: Date!
  modified_at: Date!
}

type Configuration {
  collection(name: String!): ConfigurationCollection
  collections: [ConfigurationCollection]
  dashboard: ConfigurationDashboard!
  navigation: ConfigurationNavigation!
  security: ConfigurationSecurity!
  void: Void
}

type ConfigurationCollection {
  by: ConfigurationCollectionBy!
  canPublish: Boolean
  generationOptions: ConfigurationCollectionGenerationOptions
  name: String!
  raw: JSON!

  """Use SchemaDef type from genSchema.ts"""
  schemaDef: JSON!
  withPermissions: Boolean
}

type ConfigurationCollectionBy {
  many: String!
  one: String!
}

type ConfigurationCollectionGenerationOptions {
  disableArchiveMutation: Boolean
  disableCreateMutation: Boolean
  disableHideMutation: Boolean
  disablePublishMutation: Boolean
  dynamicPreviewHref: String
  independentPublishedDocCopy: Boolean
  mandatoryWatchers: [String]
  nameField: String
  previewUrl: String
}

type ConfigurationDashboard {
  collectionRows: [ConfigurationDashboardCollectionRow]!
}

type ConfigurationDashboardCollectionRow {
  arrPath: String!
  dataKeys: ConfigurationDashboardCollectionRowDataKeys!
  header: ConfigurationDashboardCollectionRowHeader!
  query: String!
  to: ConfigurationDashboardCollectionRowTo!
}

type ConfigurationDashboardCollectionRowDataKeys {
  _id: String!
  description: String
  lastModifiedAt: String!
  lastModifiedBy: String!
  name: String!
  photo: String
}

type ConfigurationDashboardCollectionRowHeader {
  icon: String!
  label: String!
}

type ConfigurationDashboardCollectionRowTo {
  idPrefix: String!
  idSuffix: String!
}

type ConfigurationNavigation {
  """Get the items to use for the main navigation panel in the app."""
  main: [ConfigurationNavigationMainItem]!

  """
  Get the groups of items to use for the sub navigation panel in the app.
  """
  sub(key: String!): [ConfigurationNavigationSubGroup]!
}

type ConfigurationNavigationMainItem {
  icon: String!
  label: String!
  subNav: String
  to: String!
}

type ConfigurationNavigationSubGroup {
  items: [ConfigurationNavigationSubGroupItems]!
  label: String!
  uuid: String!
}

input ConfigurationNavigationSubGroupInput {
  items: [ConfigurationNavigationSubGroupItemsInput]!
  label: String!
  uuid: String!
}

type ConfigurationNavigationSubGroupItems {
  hiddenFilter: ConfigurationNavigationSubGroupItemsHiddenFilter
  icon: String!
  label: String!
  to: String!
  uuid: String!
}

type ConfigurationNavigationSubGroupItemsHiddenFilter {
  notInTeam: [String!]
}

input ConfigurationNavigationSubGroupItemsHiddenFilterInput {
  notInTeam: [String!]
}

input ConfigurationNavigationSubGroupItemsInput {
  icon: String!
  isHidden: ConfigurationNavigationSubGroupItemsHiddenFilterInput
  label: String!
  to: String!
  uuid: String!
}

type ConfigurationSecurity {
  introspection: Boolean!
  secrets: ConfigurationSecuritySecrets!
  tokens: [ConfigurationSecurityToken]!
}

type ConfigurationSecuritySecrets {
  fathom: ConfigurationSecuritySecretsFathom
}

type ConfigurationSecuritySecretsFathom {
  dashboardPassword: String!
  siteId: String!
}

type ConfigurationSecurityToken {
  expires: String!
  name: String!
  scope: ConfigurationSecurityTokenScope!
  token: String!
}

type ConfigurationSecurityTokenScope {
  admin: Boolean
}

type Content {
  _id: ObjectID!
  alert: String
  aliases: [String]
  archived: Boolean!
  body: String!
  center_text: Boolean
  dual_columns: Boolean
  enable_password_protection: Boolean!
  hidden: Boolean!
  history: [CollectionHistory]
  locked: Boolean!
  name: String!
  people: PublishableCollectionPeople
  quick_links: [ContentQuick_links]
  show_table_of_contents: Boolean
  slug: String!
  stage: Float
  timestamps: PublishableCollectionTimestamps
  yState: String
}

input ContentModifyInput {
  alert: String
  aliases: [String]
  body: String
  center_text: Boolean
  dual_columns: Boolean
  enable_password_protection: Boolean
  name: String
  quick_links: [ContentModifyInputQuick_links]
  show_table_of_contents: Boolean
  slug: String
  stage: Float
  yState: String
}

input ContentModifyInputQuick_links {
  label: String
  path: String
  yState: String
}

type ContentQuick_links {
  label: String
  path: String
}

"""ISO date string scalar type"""
scalar Date

type File {
  _id: ObjectID!
  archived: Boolean!
  file_type: String!
  hidden: Boolean!
  history: [CollectionHistory]
  href: String
  locked: Boolean!
  name: String!
  note: String
  people: CollectionPeople
  require_auth: Boolean
  size_bytes: Int!
  tags: [String]
  timestamps: CollectionTimestamps
  uuid: String!
  yState: String
}

type FileCollectionActionAccess {
  archive: FileCollectionActionAccessObject
  bypassDocPermissions: FileCollectionActionAccessObject
  create: FileCollectionActionAccessObject
  delete: FileCollectionActionAccessObject
  get: FileCollectionActionAccessObject
  hide: FileCollectionActionAccessObject
  lock: FileCollectionActionAccessObject
  modify: FileCollectionActionAccessObject
  publish: FileCollectionActionAccessObject
  watch: FileCollectionActionAccessObject
}

input FileCollectionActionAccessInput {
  archive: FileCollectionActionAccessObjectInput
  bypassDocPermissions: FileCollectionActionAccessObjectInput
  create: FileCollectionActionAccessObjectInput
  delete: FileCollectionActionAccessObjectInput
  get: FileCollectionActionAccessObjectInput
  hide: FileCollectionActionAccessObjectInput
  lock: FileCollectionActionAccessObjectInput
  modify: FileCollectionActionAccessObjectInput
  publish: FileCollectionActionAccessObjectInput
  watch: FileCollectionActionAccessObjectInput
}

type FileCollectionActionAccessObject {
  teams: [String!]
  users: [String!]
}

input FileCollectionActionAccessObjectInput {
  teams: [String!]
  users: [String!]
}

input FileModifyInput {
  name: String
  note: String
  require_auth: Boolean
  tags: [String]
  yState: String
}

"""JSON string"""
scalar JSON

type Mutation {
  billing: MutationBilling!

  """
  Set whether an existing Content document is archived.
  This mutation sets archived: true by default.
  Archived Content documents should not be presented to clients
  unless they explicitly request to view archived items.
  """
  contentArchive(_id: ObjectID!, archive: Boolean): Content

  """
  Clone an existing Content document.
  Certain fields are removed from the document (_id, slug, and any that start with __)
  """
  contentClone(_id: ObjectID!): Content

  """Create a new Content document."""
  contentCreate(alert: String, aliases: [String], body: String, center_text: Boolean, dual_columns: Boolean, enable_password_protection: Boolean, name: String!, show_table_of_contents: Boolean, slug: String, stage: Float): Content

  """Deletes a Content document."""
  contentDelete(_id: ObjectID!): Void

  """
  Set whether an existing Content document is hidden.
  This mutation sets hidden: true by default.
  Hidden Content documents should not be presented to clients;
  this is analogous to moving the document to a deleted items folder
  """
  contentHide(_id: ObjectID!, hide: Boolean): Content

  """
  Set whether an existing Content document is locked.
  This mutation sets locked: true by default.
  Locked Content documents should only be editable by the server
  and by admins.
  """
  contentLock(_id: ObjectID!, lock: Boolean): Content

  """Modify an existing Content document."""
  contentModify(_id: ObjectID!, input: ContentModifyInput!): Content

  """Publishes an existing Content document."""
  contentPublish(_id: ObjectID!, publish: Boolean, published_at: Date): Content

  """
  Add a watcher to a Content document.
  This mutation adds the watcher by default. If a user _id is
  not specified, for the watcher, the currently authenticated user will
  be used.
  """
  contentWatch(_id: ObjectID!, watch: Boolean, watcher: ObjectID): Content
  deleteCollection(name: String!): Void

  """
  Clone an existing File document.
  Certain fields are removed from the document (_id, slug, and any that start with __)
  """
  fileClone(_id: ObjectID!): File

  """Sets the action access config for the File collection."""
  fileCollectionSetActionAccess(actionAccess: FileCollectionActionAccessInput!): FileCollectionActionAccess

  """Create a new File document."""
  fileCreate(file_type: String!, name: String!, note: String, require_auth: Boolean, size_bytes: Int!, tags: [String], uuid: String!): File

  """Modify an existing File document."""
  fileModify(_id: ObjectID!, input: FileModifyInput!): File

  """
  Set whether an existing Newsletter document is archived.
  This mutation sets archived: true by default.
  Archived Newsletter documents should not be presented to clients
  unless they explicitly request to view archived items.
  """
  newsletterArchive(_id: ObjectID!, archive: Boolean): Newsletter

  """
  Clone an existing Newsletter document.
  Certain fields are removed from the document (_id, slug, and any that start with __)
  """
  newsletterClone(_id: ObjectID!): Newsletter

  """Create a new Newsletter document."""
  newsletterCreate(advancement_mini_posts: [ObjectID], announcements: [ObjectID], camping_mini_posts: [ObjectID], fundraiser_mini_posts: [ObjectID], high_adventure_mini_posts: [ObjectID], name: String, newsletter_date: Date!, pinned_mini_posts: [ObjectID], service_mini_posts: [ObjectID], slug: String, stage: Float): Newsletter

  """Deletes a Newsletter document."""
  newsletterDelete(_id: ObjectID!): Void

  """
  Set whether an existing Newsletter document is hidden.
  This mutation sets hidden: true by default.
  Hidden Newsletter documents should not be presented to clients;
  this is analogous to moving the document to a deleted items folder
  """
  newsletterHide(_id: ObjectID!, hide: Boolean): Newsletter

  """
  Set whether an existing Newsletter document is locked.
  This mutation sets locked: true by default.
  Locked Newsletter documents should only be editable by the server
  and by admins.
  """
  newsletterLock(_id: ObjectID!, lock: Boolean): Newsletter

  """Modify an existing Newsletter document."""
  newsletterModify(_id: ObjectID!, input: NewsletterModifyInput!): Newsletter

  """Publishes an existing Newsletter document."""
  newsletterPublish(_id: ObjectID!, publish: Boolean, published_at: Date): Newsletter

  """
  Add a watcher to a Newsletter document.
  This mutation adds the watcher by default. If a user _id is
  not specified, for the watcher, the currently authenticated user will
  be used.
  """
  newsletterWatch(_id: ObjectID!, watch: Boolean, watcher: ObjectID): Newsletter

  """
  Clone an existing Photo document.
  Certain fields are removed from the document (_id, slug, and any that start with __)
  """
  photoClone(_id: ObjectID!): Photo

  """Sets the action access config for the Photo collection."""
  photoCollectionSetActionAccess(actionAccess: PhotoCollectionActionAccessInput!): PhotoCollectionActionAccess

  """Create a new Photo document."""
  photoCreate(file_type: String!, height: Int!, json: JSON, legacy_caption: String, legacy_thumbnail_id: String, name: String!, note: String, require_auth: Boolean, size_bytes: Int!, tags: [String], uuid: String!, width: Int!): Photo

  """Modify an existing Photo document."""
  photoModify(_id: ObjectID!, input: PhotoModifyInput!): Photo

  """
  Set whether an existing Post document is archived.
  This mutation sets archived: true by default.
  Archived Post documents should not be presented to clients
  unless they explicitly request to view archived items.
  """
  postArchive(_id: ObjectID!, archive: Boolean): Post

  """
  Clone an existing Post document.
  Certain fields are removed from the document (_id, slug, and any that start with __)
  """
  postClone(_id: ObjectID!): Post

  """Create a new Post document."""
  postCreate(body: String, button_text: String, categories: [String], description: String!, enable_password_protection: Boolean, legacy_markdown: Boolean, name: String!, slug: String, stage: Float, submitted_by: [String]!, tags: [String]): Post

  """Deletes a Post document."""
  postDelete(_id: ObjectID!): Void

  """
  Set whether an existing Post document is hidden.
  This mutation sets hidden: true by default.
  Hidden Post documents should not be presented to clients;
  this is analogous to moving the document to a deleted items folder
  """
  postHide(_id: ObjectID!, hide: Boolean): Post

  """
  Set whether an existing Post document is locked.
  This mutation sets locked: true by default.
  Locked Post documents should only be editable by the server
  and by admins.
  """
  postLock(_id: ObjectID!, lock: Boolean): Post

  """Modify an existing Post document."""
  postModify(_id: ObjectID!, input: PostModifyInput!): Post

  """Publishes an existing Post document."""
  postPublish(_id: ObjectID!, publish: Boolean, published_at: Date): Post

  """
  Add a watcher to a Post document.
  This mutation adds the watcher by default. If a user _id is
  not specified, for the watcher, the currently authenticated user will
  be used.
  """
  postWatch(_id: ObjectID!, watch: Boolean, watcher: ObjectID): Post

  """
  Set the groups of items to use for the sub navigation panel in the app.
  System groups that are provided in the query are removed upon receipt.
  """
  setConfigurationNavigationSub(input: [ConfigurationNavigationSubGroupInput]!, key: String!): [ConfigurationNavigationSubGroup]!
  setRawConfigurationCollection(name: String!, raw: JSON): JSON
  setSecret(key: String!, value: String!): String!

  """
  Set whether an existing StandaloneEmail document is archived.
  This mutation sets archived: true by default.
  Archived StandaloneEmail documents should not be presented to clients
  unless they explicitly request to view archived items.
  """
  standaloneEmailArchive(_id: ObjectID!, archive: Boolean): StandaloneEmail

  """
  Clone an existing StandaloneEmail document.
  Certain fields are removed from the document (_id, slug, and any that start with __)
  """
  standaloneEmailClone(_id: ObjectID!): StandaloneEmail

  """Create a new StandaloneEmail document."""
  standaloneEmailCreate(body: String, header_date: Date!, legacy_markdown: Boolean, name: String!, sender_name: String!, stage: Float): StandaloneEmail

  """Deletes a StandaloneEmail document."""
  standaloneEmailDelete(_id: ObjectID!): Void

  """
  Set whether an existing StandaloneEmail document is hidden.
  This mutation sets hidden: true by default.
  Hidden StandaloneEmail documents should not be presented to clients;
  this is analogous to moving the document to a deleted items folder
  """
  standaloneEmailHide(_id: ObjectID!, hide: Boolean): StandaloneEmail

  """
  Set whether an existing StandaloneEmail document is locked.
  This mutation sets locked: true by default.
  Locked StandaloneEmail documents should only be editable by the server
  and by admins.
  """
  standaloneEmailLock(_id: ObjectID!, lock: Boolean): StandaloneEmail

  """Modify an existing StandaloneEmail document."""
  standaloneEmailModify(_id: ObjectID!, input: StandaloneEmailModifyInput!): StandaloneEmail

  """Publishes an existing StandaloneEmail document."""
  standaloneEmailPublish(_id: ObjectID!, publish: Boolean, published_at: Date): StandaloneEmail

  """
  Add a watcher to a StandaloneEmail document.
  This mutation adds the watcher by default. If a user _id is
  not specified, for the watcher, the currently authenticated user will
  be used.
  """
  standaloneEmailWatch(_id: ObjectID!, watch: Boolean, watcher: ObjectID): StandaloneEmail

  """
  Set whether an existing Team document is archived.
  This mutation sets archived: true by default.
  Archived Team documents should not be presented to clients
  unless they explicitly request to view archived items.
  """
  teamArchive(_id: ObjectID!, archive: Boolean): Team

  """
  Clone an existing Team document.
  Certain fields are removed from the document (_id, slug, and any that start with __)
  """
  teamClone(_id: ObjectID!): Team

  """Create a new Team document."""
  teamCreate(members: [ObjectID]!, name: String!, organizers: [ObjectID]!, slug: String!): Team

  """Deletes a Team document."""
  teamDelete(_id: ObjectID!): Void

  """
  Set whether an existing Team document is hidden.
  This mutation sets hidden: true by default.
  Hidden Team documents should not be presented to clients;
  this is analogous to moving the document to a deleted items folder
  """
  teamHide(_id: ObjectID!, hide: Boolean): Team

  """
  Set whether an existing Team document is locked.
  This mutation sets locked: true by default.
  Locked Team documents should only be editable by the server
  and by admins.
  """
  teamLock(_id: ObjectID!, lock: Boolean): Team

  """Modify an existing Team document."""
  teamModify(_id: ObjectID!, input: TeamModifyInput!): Team

  """
  Add a watcher to a Team document.
  This mutation adds the watcher by default. If a user _id is
  not specified, for the watcher, the currently authenticated user will
  be used.
  """
  teamWatch(_id: ObjectID!, watch: Boolean, watcher: ObjectID): Team

  """
  Set whether an existing User document is archived.
  This mutation sets archived: true by default.
  Archived User documents should not be presented to clients
  unless they explicitly request to view archived items.
  """
  userArchive(_id: ObjectID!, archive: Boolean): User

  """
  Clone an existing User document.
  Certain fields are removed from the document (_id, slug, and any that start with __)
  """
  userClone(_id: ObjectID!): User

  """Create a new User document."""
  userCreate(biography: String, current_title: String, email: String, flags: [String], github_id: Int, group: Float, last_magic_code: String, methods: [String], name: String, phone: Float, photo: String, retired: Boolean, slug: String, twitter: String, username: String!): User

  """
  Toggle whether aan existing user is deactivated.
  This mutation deactivates by default.
  """
  userDeactivate(_id: ObjectID!, deactivate: Boolean): User

  """Deletes a User document."""
  userDelete(_id: ObjectID!): Void

  """
  Set whether an existing User document is hidden.
  This mutation sets hidden: true by default.
  Hidden User documents should not be presented to clients;
  this is analogous to moving the document to a deleted items folder
  """
  userHide(_id: ObjectID!, hide: Boolean): User

  """
  Set whether an existing User document is locked.
  This mutation sets locked: true by default.
  Locked User documents should only be editable by the server
  and by admins.
  """
  userLock(_id: ObjectID!, lock: Boolean): User

  """
  Migrate a user without a local account.
  Sends a email with the new user's new username and temporary password.
  The user must sign in with the local account at least once within 48
  hours to prevent their account from becoming inaccessable.
  """
  userMigrateToPassword(_id: ObjectID!): User

  """Modify an existing User document."""
  userModify(_id: ObjectID!, input: UserModifyInput!): User

  """Change the password for the current user."""
  userPasswordChange(newPassword: String!, oldPassword: String!): User

  """Resend an invitation for a user with a temporary password."""
  userResendInvite(_id: ObjectID!): User

  """
  Add a watcher to a User document.
  This mutation adds the watcher by default. If a user _id is
  not specified, for the watcher, the currently authenticated user will
  be used.
  """
  userWatch(_id: ObjectID!, watch: Boolean, watcher: ObjectID): User

  """
  Set whether an existing WebConfig document is archived.
  This mutation sets archived: true by default.
  Archived WebConfig documents should not be presented to clients
  unless they explicitly request to view archived items.
  """
  webConfigArchive(_id: ObjectID!, archive: Boolean): WebConfig

  """
  Clone an existing WebConfig document.
  Certain fields are removed from the document (_id, slug, and any that start with __)
  """
  webConfigClone(_id: ObjectID!): WebConfig

  """Create a new WebConfig document."""
  webConfigCreate(config: JSON, name: String!): WebConfig

  """Deletes a WebConfig document."""
  webConfigDelete(_id: ObjectID!): Void

  """
  Set whether an existing WebConfig document is hidden.
  This mutation sets hidden: true by default.
  Hidden WebConfig documents should not be presented to clients;
  this is analogous to moving the document to a deleted items folder
  """
  webConfigHide(_id: ObjectID!, hide: Boolean): WebConfig

  """
  Set whether an existing WebConfig document is locked.
  This mutation sets locked: true by default.
  Locked WebConfig documents should only be editable by the server
  and by admins.
  """
  webConfigLock(_id: ObjectID!, lock: Boolean): WebConfig

  """Modify an existing WebConfig document."""
  webConfigModify(_id: ObjectID!, input: WebConfigModifyInput!): WebConfig

  """
  Add a watcher to a WebConfig document.
  This mutation adds the watcher by default. If a user _id is
  not specified, for the watcher, the currently authenticated user will
  be used.
  """
  webConfigWatch(_id: ObjectID!, watch: Boolean, watcher: ObjectID): WebConfig
}

type MutationBilling {
  features: MutationBillingFeatures!
}

type MutationBillingFeatures {
  allowDiskUse(allowDiskUse: Boolean!): Boolean!
}

type Newsletter {
  _id: ObjectID!
  advancement_mini_posts: [Post]
  announcements: [Post]
  archived: Boolean!
  camping_mini_posts: [Post]
  fundraiser_mini_posts: [Post]
  hidden: Boolean!
  high_adventure_mini_posts: [Post]
  history: [CollectionHistory]
  locked: Boolean!
  manual_calendar: [NewsletterManual_calendar]
  name: String!
  newsletter_date: Date!
  people: PublishableCollectionPeople
  pinned_mini_posts: [Post]
  service_mini_posts: [Post]
  slug: String
  stage: Float
  timestamps: PublishableCollectionTimestamps
  yState: String
}

type NewsletterManual_calendar {
  events: String
  month: String
}

input NewsletterModifyInput {
  advancement_mini_posts: [ObjectID]
  announcements: [ObjectID]
  camping_mini_posts: [ObjectID]
  fundraiser_mini_posts: [ObjectID]
  high_adventure_mini_posts: [ObjectID]
  manual_calendar: [NewsletterModifyInputManual_calendar]
  name: String
  newsletter_date: Date
  pinned_mini_posts: [ObjectID]
  service_mini_posts: [ObjectID]
  slug: String
  stage: Float
  yState: String
}

input NewsletterModifyInputManual_calendar {
  events: String
  month: String
  yState: String
}

"""mongoose ObjectID scalar type"""
scalar ObjectID

type PagedCollectionActivity {
  docs: [CollectionActivity]!
  hasNextPage: Boolean
  hasPrevPage: Boolean
  limit: Int
  nextPage: Int
  page: Int
  pagingCounter: Int
  prevPage: Int
  totalDocs: Int
  totalPages: Int
}

type PagedContent {
  docs: [Content]!
  hasNextPage: Boolean
  hasPrevPage: Boolean
  limit: Int
  nextPage: Int
  page: Int
  pagingCounter: Int
  prevPage: Int
  totalDocs: Int
  totalPages: Int
}

type PagedFile {
  docs: [File]!
  hasNextPage: Boolean
  hasPrevPage: Boolean
  limit: Int
  nextPage: Int
  page: Int
  pagingCounter: Int
  prevPage: Int
  totalDocs: Int
  totalPages: Int
}

type PagedNewsletter {
  docs: [Newsletter]!
  hasNextPage: Boolean
  hasPrevPage: Boolean
  limit: Int
  nextPage: Int
  page: Int
  pagingCounter: Int
  prevPage: Int
  totalDocs: Int
  totalPages: Int
}

type PagedPhoto {
  docs: [Photo]!
  hasNextPage: Boolean
  hasPrevPage: Boolean
  limit: Int
  nextPage: Int
  page: Int
  pagingCounter: Int
  prevPage: Int
  totalDocs: Int
  totalPages: Int
}

type PagedPost {
  docs: [Post]!
  hasNextPage: Boolean
  hasPrevPage: Boolean
  limit: Int
  nextPage: Int
  page: Int
  pagingCounter: Int
  prevPage: Int
  totalDocs: Int
  totalPages: Int
}

type PagedPrunedContent {
  docs: [PrunedContent]!
  hasNextPage: Boolean
  hasPrevPage: Boolean
  limit: Int
  nextPage: Int
  page: Int
  pagingCounter: Int
  prevPage: Int
  totalDocs: Int
  totalPages: Int
}

type PagedPrunedNewsletter {
  docs: [PrunedNewsletter]!
  hasNextPage: Boolean
  hasPrevPage: Boolean
  limit: Int
  nextPage: Int
  page: Int
  pagingCounter: Int
  prevPage: Int
  totalDocs: Int
  totalPages: Int
}

type PagedPrunedPost {
  docs: [PrunedPost]!
  hasNextPage: Boolean
  hasPrevPage: Boolean
  limit: Int
  nextPage: Int
  page: Int
  pagingCounter: Int
  prevPage: Int
  totalDocs: Int
  totalPages: Int
}

type PagedPrunedStandaloneEmail {
  docs: [PrunedStandaloneEmail]!
  hasNextPage: Boolean
  hasPrevPage: Boolean
  limit: Int
  nextPage: Int
  page: Int
  pagingCounter: Int
  prevPage: Int
  totalDocs: Int
  totalPages: Int
}

type PagedPrunedUser {
  docs: [PrunedUser]!
  hasNextPage: Boolean
  hasPrevPage: Boolean
  limit: Int
  nextPage: Int
  page: Int
  pagingCounter: Int
  prevPage: Int
  totalDocs: Int
  totalPages: Int
}

type PagedPrunedWebConfig {
  docs: [PrunedWebConfig]!
  hasNextPage: Boolean
  hasPrevPage: Boolean
  limit: Int
  nextPage: Int
  page: Int
  pagingCounter: Int
  prevPage: Int
  totalDocs: Int
  totalPages: Int
}

type PagedStandaloneEmail {
  docs: [StandaloneEmail]!
  hasNextPage: Boolean
  hasPrevPage: Boolean
  limit: Int
  nextPage: Int
  page: Int
  pagingCounter: Int
  prevPage: Int
  totalDocs: Int
  totalPages: Int
}

type PagedTeam {
  docs: [Team]!
  hasNextPage: Boolean
  hasPrevPage: Boolean
  limit: Int
  nextPage: Int
  page: Int
  pagingCounter: Int
  prevPage: Int
  totalDocs: Int
  totalPages: Int
}

type PagedUser {
  docs: [User]!
  hasNextPage: Boolean
  hasPrevPage: Boolean
  limit: Int
  nextPage: Int
  page: Int
  pagingCounter: Int
  prevPage: Int
  totalDocs: Int
  totalPages: Int
}

type PagedWebConfig {
  docs: [WebConfig]!
  hasNextPage: Boolean
  hasPrevPage: Boolean
  limit: Int
  nextPage: Int
  page: Int
  pagingCounter: Int
  prevPage: Int
  totalDocs: Int
  totalPages: Int
}

type Photo {
  _id: ObjectID!
  archived: Boolean!
  file_type: String!
  height: Int!
  hidden: Boolean!
  history: [CollectionHistory]
  href: String
  json: JSON
  legacy_caption: String
  legacy_thumbnail_id: String
  locked: Boolean!
  name: String!
  note: String
  people: PhotoPeople
  photo_url: String
  require_auth: Boolean
  size_bytes: Int!
  tags: [String]
  timestamps: CollectionTimestamps
  uuid: String!
  width: Int!
  yState: String
}

type PhotoCollectionActionAccess {
  archive: PhotoCollectionActionAccessObject
  bypassDocPermissions: PhotoCollectionActionAccessObject
  create: PhotoCollectionActionAccessObject
  delete: PhotoCollectionActionAccessObject
  get: PhotoCollectionActionAccessObject
  hide: PhotoCollectionActionAccessObject
  lock: PhotoCollectionActionAccessObject
  modify: PhotoCollectionActionAccessObject
  publish: PhotoCollectionActionAccessObject
  watch: PhotoCollectionActionAccessObject
}

input PhotoCollectionActionAccessInput {
  archive: PhotoCollectionActionAccessObjectInput
  bypassDocPermissions: PhotoCollectionActionAccessObjectInput
  create: PhotoCollectionActionAccessObjectInput
  delete: PhotoCollectionActionAccessObjectInput
  get: PhotoCollectionActionAccessObjectInput
  hide: PhotoCollectionActionAccessObjectInput
  lock: PhotoCollectionActionAccessObjectInput
  modify: PhotoCollectionActionAccessObjectInput
  publish: PhotoCollectionActionAccessObjectInput
  watch: PhotoCollectionActionAccessObjectInput
}

type PhotoCollectionActionAccessObject {
  teams: [String!]
  users: [String!]
}

input PhotoCollectionActionAccessObjectInput {
  teams: [String!]
  users: [String!]
}

input PhotoModifyInput {
  json: JSON
  name: String
  note: String
  people: PhotoModifyInputPeople
  require_auth: Boolean
  tags: [String]
  yState: String
}

input PhotoModifyInputPeople {
  photo_created_by: String
  yState: String
}

type PhotoPeople {
  created_by: User
  last_modified_by: User
  modified_by: [User]
  photo_created_by: String
  watching: [User]
}

type Post {
  _id: ObjectID!
  archived: Boolean!
  body: String!
  button_text: String!
  categories: [String]!
  description: String!
  enable_password_protection: Boolean!
  hidden: Boolean!
  history: [CollectionHistory]
  legacy_markdown: Boolean!
  locked: Boolean!
  name: String!
  people: PublishableCollectionPeople
  permissions: PostPermissions
  slug: String
  stage: Float
  submitted_by: [String]!
  tags: [String]!
  timestamps: PublishableCollectionTimestamps
  yState: String
}

input PostModifyInput {
  body: String
  button_text: String
  categories: [String]
  description: String
  enable_password_protection: Boolean
  name: String
  permissions: PostModifyInputPermissions
  slug: String
  stage: Float
  submitted_by: [String]
  tags: [String]
  yState: String
}

input PostModifyInputPermissions {
  teams: [ObjectID]
  users: [ObjectID]
  yState: String
}

type PostPermissions {
  teams: [ObjectID]!
  users: [User]!
}

type PrunedContent {
  _id: ObjectID!
  alert: String
  aliases: [String]
  body: String!
  center_text: Boolean
  dual_columns: Boolean
  enable_password_protection: Boolean!
  name: String!
  quick_links: [ContentQuick_links]
  show_table_of_contents: Boolean
  slug: String!
  timestamps: PrunedContentTimestamps
}

type PrunedContentQuick_links {
  void: Void
}

type PrunedContentTimestamps {
  published_at: Date!
  updated_at: Date!
}

type PrunedNewsletter {
  _id: ObjectID!
  advancement_mini_posts: [Post]
  announcements: [Post]
  camping_mini_posts: [Post]
  fundraiser_mini_posts: [Post]
  high_adventure_mini_posts: [Post]
  manual_calendar: [NewsletterManual_calendar]
  name: String!
  newsletter_date: Date!
  pinned_mini_posts: [Post]
  service_mini_posts: [Post]
  slug: String
  timestamps: PrunedNewsletterTimestamps
}

type PrunedNewsletterManual_calendar {
  void: Void
}

type PrunedNewsletterTimestamps {
  published_at: Date!
  updated_at: Date!
}

type PrunedPost {
  _id: ObjectID!
  body: String!
  button_text: String!
  categories: [String]!
  description: String!
  enable_password_protection: Boolean!
  legacy_markdown: Boolean!
  name: String!
  permissions: PrunedPostPermissions
  slug: String
  submitted_by: [String]!
  tags: [String]!
  timestamps: PrunedPostTimestamps
}

type PrunedPostPermissions {
  void: Void
}

type PrunedPostTimestamps {
  published_at: Date!
  updated_at: Date!
}

type PrunedStandaloneEmail {
  _id: ObjectID!
  body: String!
  header_date: Date!
  legacy_markdown: Boolean!
  name: String!
  sender_name: String!
  timestamps: PrunedStandaloneEmailTimestamps
}

type PrunedStandaloneEmailTimestamps {
  published_at: Date!
  updated_at: Date!
}

type PrunedUser {
  _id: ObjectID!
  biography: String
  constantcontact: PrunedUserConstantcontact
  current_title: String
  email: String
  github_id: Int
  group: Float
  name: String!
  photo: String
  slug: String!
  timestamps: PrunedUserTimestamps
  twitter: String
}

type PrunedUserConstantcontact {
  void: Void
}

type PrunedUserTimestamps {
  void: Void
}

type PrunedWebConfig {
  _id: ObjectID!
  config: JSON
  name: String!
  timestamps: PrunedWebConfigTimestamps
}

type PrunedWebConfigTimestamps {
  void: Void
}

type PublishableCollection {
  _id: ObjectID!
  archived: Boolean!
  hidden: Boolean!
  history: [CollectionHistory]
  locked: Boolean!
  people: PublishableCollectionPeople
  timestamps: PublishableCollectionTimestamps
  yState: String
}

type PublishableCollectionPeople {
  created_by: User
  last_modified_by: User
  last_published_by: User
  modified_by: [User]
  published_by: [User]
  watching: [User]
}

type PublishableCollectionTimestamps {
  created_at: Date!
  modified_at: Date!
  published_at: Date!
  updated_at: Date!
}

type Query {
  billing: Billing!

  """Get the recent activity in the specified collections"""
  collectionActivity(collections: [String], exclude: [String], limit: Int!, page: Int): PagedCollectionActivity
  configuration: Configuration

  """Get a Content document by _id."""
  content(_id: ObjectID!): Content

  """
  Get the permissions of the currently authenticated user for the
  Content collection.
  """
  contentActionAccess(_id: ObjectID): CollectionActionAccess

  """
  Get a pruned Content document by _id.
  Provide the date of to ensure that the correct document is provided
  (in case the slug is not unique).
  """
  contentBySlugPublic(date: Date, slug: String!): PrunedContent

  """Get a pruned Content document by _id."""
  contentPublic(_id: ObjectID!): PrunedContent

  """
  Get a set of Content documents by _id.
  If _id is omitted, the API will return all Content documents.
  """
  contents(_ids: [ObjectID], filter: JSON, limit: Int!, offset: Int, page: Int, sort: JSON): PagedContent

  """
  Get a set of pruned Content documents by _id.
  If _id is omitted, the API will return all Content documents.
  """
  contentsPublic(_ids: [ObjectID], filter: JSON, limit: Int!, offset: Int, page: Int, sort: JSON): PagedPrunedContent

  """
  Get an authenticated URL to the fathom analytics dashboard.
  Only administrators can use this query.
  """
  fathomDashboard: String

  """Get a File document by _id."""
  file(_id: ObjectID!): File

  """
  Get the permissions of the currently authenticated user for the
  File collection.
  """
  fileActionAccess(_id: ObjectID): CollectionActionAccess

  """
  Get a set of File documents by _id.
  If _id is omitted, the API will return all File documents.
  """
  files(_ids: [ObjectID], filter: JSON, limit: Int!, offset: Int, page: Int, sort: JSON): PagedFile

  """Get a Newsletter document by _id."""
  newsletter(_id: ObjectID!): Newsletter

  """
  Get the permissions of the currently authenticated user for the
  Newsletter collection.
  """
  newsletterActionAccess(_id: ObjectID): CollectionActionAccess

  """
  Get a pruned Newsletter document by _id.
  Provide the date of to ensure that the correct document is provided
  (in case the slug is not unique).
  """
  newsletterBySlugPublic(date: Date, slug: String!): PrunedNewsletter

  """Get a pruned Newsletter document by _id."""
  newsletterPublic(_id: ObjectID!): PrunedNewsletter

  """
  Get a set of Newsletter documents by _id.
  If _id is omitted, the API will return all Newsletter documents.
  """
  newsletters(_ids: [ObjectID], filter: JSON, limit: Int!, offset: Int, page: Int, sort: JSON): PagedNewsletter

  """
  Get a set of pruned Newsletter documents by _id.
  If _id is omitted, the API will return all Newsletter documents.
  """
  newslettersPublic(_ids: [ObjectID], filter: JSON, limit: Int!, offset: Int, page: Int, sort: JSON): PagedPrunedNewsletter

  """Get a Photo document by _id."""
  photo(_id: ObjectID!): Photo

  """
  Get the permissions of the currently authenticated user for the
  Photo collection.
  """
  photoActionAccess(_id: ObjectID): CollectionActionAccess

  """
  Get a set of Photo documents by _id.
  If _id is omitted, the API will return all Photo documents.
  """
  photos(_ids: [ObjectID], filter: JSON, limit: Int!, offset: Int, page: Int, sort: JSON): PagedPhoto

  """Get a Post document by _id."""
  post(_id: ObjectID!): Post

  """
  Get the permissions of the currently authenticated user for the
  Post collection.
  """
  postActionAccess(_id: ObjectID): CollectionActionAccess

  """
  Get a pruned Post document by _id.
  Provide the date of to ensure that the correct document is provided
  (in case the slug is not unique).
  """
  postBySlugPublic(date: Date, slug: String!): PrunedPost

  """Get a pruned Post document by _id."""
  postPublic(_id: ObjectID!): PrunedPost

  """
  Get a set of Post documents by _id.
  If _id is omitted, the API will return all Post documents.
  """
  posts(_ids: [ObjectID], filter: JSON, limit: Int!, offset: Int, page: Int, sort: JSON): PagedPost

  """
  Get a set of pruned Post documents by _id.
  If _id is omitted, the API will return all Post documents.
  """
  postsPublic(_ids: [ObjectID], filter: JSON, limit: Int!, offset: Int, page: Int, sort: JSON): PagedPrunedPost

  """
  Get a signed s3 URL for uploading photos and documents to an existing s3 bucket.
  """
  s3Sign(fileName: String!, fileType: String!, s3Bucket: String!): S3SignedResponse

  """Get a StandaloneEmail document by _id."""
  standaloneEmail(_id: ObjectID!): StandaloneEmail

  """
  Get the permissions of the currently authenticated user for the
  StandaloneEmail collection.
  """
  standaloneEmailActionAccess(_id: ObjectID): CollectionActionAccess

  """Get a pruned StandaloneEmail document by _id."""
  standaloneEmailPublic(_id: ObjectID!): PrunedStandaloneEmail

  """
  Get a set of StandaloneEmail documents by _id.
  If _id is omitted, the API will return all StandaloneEmail documents.
  """
  standaloneEmails(_ids: [ObjectID], filter: JSON, limit: Int!, offset: Int, page: Int, sort: JSON): PagedStandaloneEmail

  """
  Get a set of pruned StandaloneEmail documents by _id.
  If _id is omitted, the API will return all StandaloneEmail documents.
  """
  standaloneEmailsPublic(_ids: [ObjectID], filter: JSON, limit: Int!, offset: Int, page: Int, sort: JSON): PagedPrunedStandaloneEmail

  """Get a Team document by _id."""
  team(_id: ObjectID!): Team

  """
  Get the permissions of the currently authenticated user for the
  Team collection.
  """
  teamActionAccess(_id: ObjectID): CollectionActionAccess

  """Lists the active users who are not assigned to any teams."""
  teamUnassignedUsers: [User]

  """
  Get a set of Team documents by _id.
  If _id is omitted, the API will return all Team documents.
  """
  teams(_ids: [ObjectID], filter: JSON, limit: Int!, offset: Int, page: Int, sort: JSON): PagedTeam

  """Get some details about the tenant."""
  tenant: TenantDetails

  """
  Get a user by _id. If _id is omitted, the API will return the current
  user.
  """
  user(_id: ObjectID): User

  """
  Get the permissions of the currently authenticated user for the
  User collection.
  """
  userActionAccess(_id: ObjectID): CollectionActionAccess

  """
  Get a pruned User document by _id.
  Provide the date of to ensure that the correct document is provided
  (in case the slug is not unique).
  """
  userBySlugPublic(date: Date, slug: String!): PrunedUser

  """
  Returns whether the username exists in the database.
  Also return the pruned user.
  """
  userExists(username: String!): UserExistsResponse!

  """Returns the sign-on methods for the username."""
  userMethods(username: String!): [String]!

  """Get a pruned User document by _id."""
  userPublic(_id: ObjectID!): PrunedUser

  """Returns a list of documents in collections that reference this user"""
  userReferences(_id: ObjectID, collections: [String!], exclude: [String!]): [UserReference!]!

  """
  Get a set of User documents by _id.
  If _id is omitted, the API will return all User documents.
  """
  users(_ids: [ObjectID], filter: JSON, limit: Int!, offset: Int, page: Int, sort: JSON): PagedUser

  """
  Get a set of pruned User documents by _id.
  If _id is omitted, the API will return all User documents.
  """
  usersPublic(_ids: [ObjectID], filter: JSON, limit: Int!, offset: Int, page: Int, sort: JSON): PagedPrunedUser

  """Get a WebConfig document by _id."""
  webConfig(_id: ObjectID!): WebConfig

  """
  Get the permissions of the currently authenticated user for the
  WebConfig collection.
  """
  webConfigActionAccess(_id: ObjectID): CollectionActionAccess

  """Gets the announcements for the home page"""
  webConfigAnnouncementsPublic: [WebConfigAnnouncementsPublic]

  """Gets forms and documents for the forms and documents page"""
  webConfigFormsDocumentsPublic: [WebConfigFormsDocumentsPublic]

  """Get a pruned WebConfig document by _id."""
  webConfigPublic(_id: ObjectID!): PrunedWebConfig

  """
  Get a set of WebConfig documents by _id.
  If _id is omitted, the API will return all WebConfig documents.
  """
  webConfigs(_ids: [ObjectID], filter: JSON, limit: Int!, offset: Int, page: Int, sort: JSON): PagedWebConfig

  """
  Get a set of pruned WebConfig documents by _id.
  If _id is omitted, the API will return all WebConfig documents.
  """
  webConfigsPublic(_ids: [ObjectID], filter: JSON, limit: Int!, offset: Int, page: Int, sort: JSON): PagedPrunedWebConfig
}

type S3SignedResponse {
  location: String!
  signedRequest: String!
}

type StandaloneEmail {
  _id: ObjectID!
  archived: Boolean!
  body: String!
  header_date: Date!
  hidden: Boolean!
  history: [CollectionHistory]
  legacy_markdown: Boolean!
  locked: Boolean!
  name: String!
  people: PublishableCollectionPeople
  sender_name: String!
  stage: Float!
  timestamps: PublishableCollectionTimestamps
  yState: String
}

input StandaloneEmailModifyInput {
  body: String
  header_date: Date
  name: String
  sender_name: String
  stage: Float
  yState: String
}

type Team {
  _id: ObjectID!
  archived: Boolean!
  hidden: Boolean!
  history: [CollectionHistory]
  locked: Boolean!
  members: [User]!
  name: String!
  organizers: [User]!
  people: CollectionPeople
  slug: String!
  timestamps: CollectionTimestamps
  yState: String
}

input TeamModifyInput {
  members: [ObjectID]
  name: String
  organizers: [ObjectID]
  slug: String
  yState: String
}

type TenantDetails {
  displayName: String
  name: String!
}

type Usage {
  api(month: Int, year: Int): ApiUsage
  storage: UsageStorage!
}

type UsageStorage {
  database: Float!
  files: Float!
}

type User {
  _id: ObjectID!
  archived: Boolean!
  biography: String
  constantcontact: UserConstantcontact
  current_title: String
  email: String
  flags: [String]!
  github_id: Int
  group: Float
  hidden: Boolean!
  history: [CollectionHistory]
  last_magic_code: String
  locked: Boolean!
  methods: [String]
  name: String!
  people: CollectionPeople
  phone: Float
  photo: String
  retired: Boolean
  slug: String!
  teams(_id: ObjectID!, limit: Int!, offset: Int, page: Int, sort: JSON): PagedTeam
  timestamps: UserTimestamps
  twitter: String
  username: String
  yState: String
}

type UserConstantcontact {
  access_token: String
  expires_at: Int
  refresh_token: String
}

type UserExistsResponse {
  doc: PrunedUser
  exists: Boolean!
  methods: [String]!
}

input UserModifyInput {
  biography: String
  constantcontact: UserModifyInputConstantcontact
  current_title: String
  email: String
  group: Float
  name: String
  phone: Float
  photo: String
  slug: String
  timestamps: UserModifyInputTimestamps
  twitter: String
  yState: String
}

input UserModifyInputConstantcontact {
  access_token: String
  expires_at: Int
  refresh_token: String
  yState: String
}

input UserModifyInputTimestamps {
  joined_at: Date
  last_active_at: Date
  last_login_at: Date
  left_at: Date
  yState: String
}

type UserReference {
  _id: String!
  count: Int!
  docs: [UserReferenceDoc!]!
}

type UserReferenceDoc {
  _id: ObjectID!
  name: String
  url: String
}

type UserTimestamps {
  created_at: Date!
  joined_at: Date!
  last_active_at: Date!
  last_login_at: Date!
  left_at: Date!
  modified_at: Date!
}

"""Void custom scalar"""
scalar Void

type WebConfig {
  _id: ObjectID!
  archived: Boolean!
  config: JSON
  hidden: Boolean!
  history: [CollectionHistory]
  locked: Boolean!
  name: String!
  people: CollectionPeople
  timestamps: CollectionTimestamps
  yState: String
}

type WebConfigAnnouncementsPublic {
  href: String
  href_text: String
  photo: Photo
  subtitle: String
  title: String
}

type WebConfigFormsDocumentsPublic {
  documents: [File]!
  label: String!
}

input WebConfigModifyInput {
  config: JSON
  name: String
  yState: String
}

type WithPermissions {
  permissions: CollectionPermissions!
}

input WithPermissionsInput {
  permissions: CollectionPermissionsInput
}

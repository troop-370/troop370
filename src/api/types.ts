/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/categories": {
    get: operations["get/categories"];
    post: operations["post/categories"];
  };
  "/categories/{id}": {
    get: operations["get/categories/{id}"];
    put: operations["put/categories/{id}"];
    delete: operations["delete/categories/{id}"];
  };
  "/events-page": {
    get: operations["get/events-page"];
    put: operations["put/events-page"];
    delete: operations["delete/events-page"];
  };
  "/forms-and-documents-page": {
    get: operations["get/forms-and-documents-page"];
    put: operations["put/forms-and-documents-page"];
    delete: operations["delete/forms-and-documents-page"];
  };
  "/home-page": {
    get: operations["get/home-page"];
    put: operations["put/home-page"];
    delete: operations["delete/home-page"];
  };
  "/navigation": {
    get: operations["get/navigation"];
    put: operations["put/navigation"];
    delete: operations["delete/navigation"];
  };
  "/newsletters": {
    get: operations["get/newsletters"];
    post: operations["post/newsletters"];
  };
  "/newsletters/{id}": {
    get: operations["get/newsletters/{id}"];
    put: operations["put/newsletters/{id}"];
    delete: operations["delete/newsletters/{id}"];
  };
  "/pages": {
    get: operations["get/pages"];
    post: operations["post/pages"];
  };
  "/pages/{id}": {
    get: operations["get/pages/{id}"];
    put: operations["put/pages/{id}"];
    delete: operations["delete/pages/{id}"];
  };
  "/posts": {
    get: operations["get/posts"];
    post: operations["post/posts"];
  };
  "/posts/{id}": {
    get: operations["get/posts/{id}"];
    put: operations["put/posts/{id}"];
    delete: operations["delete/posts/{id}"];
  };
  "/redirects": {
    get: operations["get/redirects"];
    post: operations["post/redirects"];
  };
  "/redirects/{id}": {
    get: operations["get/redirects/{id}"];
    put: operations["put/redirects/{id}"];
    delete: operations["delete/redirects/{id}"];
  };
  "/standalone-emails": {
    get: operations["get/standalone-emails"];
    post: operations["post/standalone-emails"];
  };
  "/standalone-emails/{id}": {
    get: operations["get/standalone-emails/{id}"];
    put: operations["put/standalone-emails/{id}"];
    delete: operations["delete/standalone-emails/{id}"];
  };
  "/tags": {
    get: operations["get/tags"];
    post: operations["post/tags"];
  };
  "/tags/{id}": {
    get: operations["get/tags/{id}"];
    put: operations["put/tags/{id}"];
    delete: operations["delete/tags/{id}"];
  };
  "/upload": {
    /** @description Upload files */
    post: {
      /** @description Upload files */
      requestBody: {
        content: {
          "multipart/form-data": {
            /** @description The folder where the file(s) will be uploaded to (only supported on strapi-provider-upload-aws-s3). */
            path?: string;
            /** @description The ID of the entry which the file(s) will be linked to */
            refId?: string;
            /** @description The unique ID (uid) of the model which the file(s) will be linked to (api::restaurant.restaurant). */
            ref?: string;
            /** @description The field of the entry which the file(s) will be precisely linked to. */
            field?: string;
            files: string[];
          };
        };
      };
      responses: {
        /** @description response */
        200: {
          content: {
            "application/json": components["schemas"]["UploadFile"][];
          };
        };
      };
    };
  };
  "/upload?id={id}": {
    /** @description Upload file information */
    post: {
      parameters: {
        query: {
          /** @description File id */
          id: string;
        };
      };
      /** @description Upload files */
      requestBody: {
        content: {
          "multipart/form-data": {
            fileInfo?: {
              name?: string;
              alternativeText?: string;
              caption?: string;
            };
            /** Format: binary */
            files?: string;
          };
        };
      };
      responses: {
        /** @description response */
        200: {
          content: {
            "application/json": components["schemas"]["UploadFile"][];
          };
        };
      };
    };
  };
  "/upload/files": {
    get: {
      responses: {
        /** @description Get a list of files */
        200: {
          content: {
            "application/json": components["schemas"]["UploadFile"][];
          };
        };
      };
    };
  };
  "/upload/files/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Get a specific file */
        200: {
          content: {
            "application/json": components["schemas"]["UploadFile"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Delete a file */
        200: {
          content: {
            "application/json": components["schemas"]["UploadFile"];
          };
        };
      };
    };
  };
  "/connect/{provider}": {
    /**
     * Login with a provider
     * @description Redirects to provider login before being redirect to /auth/{provider}/callback
     */
    get: {
      parameters: {
        path: {
          /** @description Provider name */
          provider: string;
        };
      };
      responses: {
        /** @description Redirect response */
        301: {
          content: never;
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/auth/local": {
    /**
     * Local login
     * @description Returns a jwt token and user info
     */
    post: {
      requestBody: {
        content: {
          /**
           * @example {
           *   "identifier": "foobar",
           *   "password": "Test1234"
           * }
           */
          "application/json": {
            identifier?: string;
            password?: string;
          };
        };
      };
      responses: {
        /** @description Connection */
        200: {
          content: {
            "application/json": components["schemas"]["Users-Permissions-UserRegistration"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/auth/local/register": {
    /**
     * Register a user
     * @description Returns a jwt token and user info
     */
    post: {
      requestBody: {
        content: {
          /**
           * @example {
           *   "username": "foobar",
           *   "email": "foo.bar@strapi.io",
           *   "password": "Test1234"
           * }
           */
          "application/json": {
            username?: string;
            email?: string;
            password?: string;
          };
        };
      };
      responses: {
        /** @description Successful registration */
        200: {
          content: {
            "application/json": components["schemas"]["Users-Permissions-UserRegistration"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/auth/{provider}/callback": {
    /** Default Callback from provider auth */
    get: {
      parameters: {
        path: {
          /** @description Provider name */
          provider: string;
        };
      };
      responses: {
        /** @description Returns a jwt token and user info */
        200: {
          content: {
            "application/json": components["schemas"]["Users-Permissions-UserRegistration"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/auth/forgot-password": {
    /** Send rest password email */
    post: {
      requestBody: {
        content: {
          /**
           * @example {
           *   "email": "foo.bar@strapi.io"
           * }
           */
          "application/json": {
            email?: string;
          };
        };
      };
      responses: {
        /** @description Returns ok */
        200: {
          content: {
            "application/json": {
              /** @enum {string} */
              ok?: true;
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/auth/reset-password": {
    /** Rest user password */
    post: {
      requestBody: {
        content: {
          /**
           * @example {
           *   "password": "Test1234",
           *   "passwordConfirmation": "Test1234",
           *   "code": "zertyoaizndoianzodianzdonaizdoinaozdnia"
           * }
           */
          "application/json": {
            password?: string;
            passwordConfirmation?: string;
            code?: string;
          };
        };
      };
      responses: {
        /** @description Returns a jwt token and user info */
        200: {
          content: {
            "application/json": components["schemas"]["Users-Permissions-UserRegistration"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/auth/change-password": {
    /** Update user's own password */
    post: {
      requestBody: {
        content: {
          "application/json": {
            password: string;
            currentPassword: string;
            passwordConfirmation: string;
          };
        };
      };
      responses: {
        /** @description Returns a jwt token and user info */
        200: {
          content: {
            "application/json": components["schemas"]["Users-Permissions-UserRegistration"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/auth/email-confirmation": {
    /** Confirm user email */
    get: {
      parameters: {
        query?: {
          /** @description confirmation token received by email */
          confirmation?: string;
        };
      };
      responses: {
        /** @description Redirects to the configure email confirmation redirect url */
        301: {
          content: never;
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/auth/send-email-confirmation": {
    /** Send confirmation email */
    post: {
      requestBody: {
        content: {
          "application/json": {
            email?: string;
          };
        };
      };
      responses: {
        /** @description Returns email and boolean to confirm email was sent */
        200: {
          content: {
            "application/json": {
              email?: string;
              /** @enum {string} */
              sent?: true;
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/users-permissions/permissions": {
    /** Get default generated permissions */
    get: {
      responses: {
        /** @description Returns the permissions tree */
        200: {
          content: {
            "application/json": {
              permissions?: components["schemas"]["Users-Permissions-PermissionsTree"];
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/users-permissions/roles": {
    /** List roles */
    get: {
      responses: {
        /** @description Returns list of roles */
        200: {
          content: {
            "application/json": {
              roles?: (components["schemas"]["Users-Permissions-Role"] & {
                  nb_users?: number;
                })[];
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Create a role */
    post: {
      requestBody: components["requestBodies"]["Users-Permissions-RoleRequest"];
      responses: {
        /** @description Returns ok if the role was create */
        200: {
          content: {
            "application/json": {
              /** @enum {string} */
              ok?: true;
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/users-permissions/roles/{id}": {
    /** Get a role */
    get: {
      parameters: {
        path: {
          /** @description role Id */
          id: string;
        };
      };
      responses: {
        /** @description Returns the role */
        200: {
          content: {
            "application/json": {
              role?: components["schemas"]["Users-Permissions-Role"];
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/users-permissions/roles/{role}": {
    /** Update a role */
    put: {
      parameters: {
        path: {
          /** @description role Id */
          role: string;
        };
      };
      requestBody: components["requestBodies"]["Users-Permissions-RoleRequest"];
      responses: {
        /** @description Returns ok if the role was udpated */
        200: {
          content: {
            "application/json": {
              /** @enum {string} */
              ok?: true;
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Delete a role */
    delete: {
      parameters: {
        path: {
          /** @description role Id */
          role: string;
        };
      };
      responses: {
        /** @description Returns ok if the role was delete */
        200: {
          content: {
            "application/json": {
              /** @enum {string} */
              ok?: true;
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/users": {
    /** Get list of users */
    get: {
      responses: {
        /** @description Returns an array of users */
        200: {
          content: {
            "application/json": components["schemas"]["Users-Permissions-User"][];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Create a user */
    post: {
      requestBody: {
        content: {
          /**
           * @example {
           *   "username": "foo",
           *   "email": "foo@strapi.io",
           *   "password": "foo-password"
           * }
           */
          "application/json": {
            email: string;
            username: string;
            password: string;
          };
        };
      };
      responses: {
        /** @description Returns created user info */
        201: {
          content: {
            "application/json": components["schemas"]["Users-Permissions-User"] & {
              role?: components["schemas"]["Users-Permissions-Role"];
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/users/{id}": {
    /** Get a user */
    get: {
      parameters: {
        path: {
          /** @description user Id */
          id: string;
        };
      };
      responses: {
        /** @description Returns a user */
        200: {
          content: {
            "application/json": components["schemas"]["Users-Permissions-User"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Update a user */
    put: {
      parameters: {
        path: {
          /** @description user Id */
          id: string;
        };
      };
      requestBody: {
        content: {
          /**
           * @example {
           *   "username": "foo",
           *   "email": "foo@strapi.io",
           *   "password": "foo-password"
           * }
           */
          "application/json": {
            email: string;
            username: string;
            password: string;
          };
        };
      };
      responses: {
        /** @description Returns updated user info */
        200: {
          content: {
            "application/json": components["schemas"]["Users-Permissions-User"] & {
              role?: components["schemas"]["Users-Permissions-Role"];
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Delete a user */
    delete: {
      parameters: {
        path: {
          /** @description user Id */
          id: string;
        };
      };
      responses: {
        /** @description Returns deleted user info */
        200: {
          content: {
            "application/json": components["schemas"]["Users-Permissions-User"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/users/me": {
    /** Get authenticated user info */
    get: {
      responses: {
        /** @description Returns user info */
        200: {
          content: {
            "application/json": components["schemas"]["Users-Permissions-User"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/users/count": {
    /** Get user count */
    get: {
      responses: {
        /** @description Returns a number */
        200: {
          content: {
            "application/json": number;
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Error: {
      data?: Record<string, never> | Record<string, never>[] | null;
      error: {
        status?: number;
        name?: string;
        message?: string;
        details?: Record<string, never>;
      };
    };
    CategoryRequest: {
      data: {
        label: string;
        value: string;
        locale?: string;
        localizations?: (number | string)[];
        /** @example string or id */
        strapi_stage?: number | string;
        /** @example string or id */
        strapi_assignee?: number | string;
      };
    };
    CategoryListResponse: {
      data?: components["schemas"]["Category"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    Category: {
      id?: number;
      documentId?: string;
      label: string;
      value: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        id?: number;
        documentId?: string;
        firstname?: string;
        lastname?: string;
        username?: string;
        /** Format: email */
        email?: string;
        resetPasswordToken?: string;
        registrationToken?: string;
        isActive?: boolean;
        roles?: {
            id?: number;
            documentId?: string;
            name?: string;
            code?: string;
            description?: string;
            users?: {
                id?: number;
                documentId?: string;
              }[];
            permissions?: {
                id?: number;
                documentId?: string;
                action?: string;
                actionParameters?: unknown;
                subject?: string;
                properties?: unknown;
                conditions?: unknown;
                role?: {
                  id?: number;
                  documentId?: string;
                };
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                /** Format: date-time */
                publishedAt?: string;
                createdBy?: {
                  id?: number;
                  documentId?: string;
                };
                updatedBy?: {
                  id?: number;
                  documentId?: string;
                };
                locale?: string;
                localizations?: {
                    id?: number;
                    documentId?: string;
                  }[];
              }[];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              id?: number;
              documentId?: string;
            };
            updatedBy?: {
              id?: number;
              documentId?: string;
            };
            locale?: string;
            localizations?: {
                id?: number;
                documentId?: string;
              }[];
          }[];
        blocked?: boolean;
        preferedLanguage?: string;
        /** Format: date-time */
        createdAt?: string;
        /** Format: date-time */
        updatedAt?: string;
        /** Format: date-time */
        publishedAt?: string;
        createdBy?: {
          id?: number;
          documentId?: string;
        };
        updatedBy?: {
          id?: number;
          documentId?: string;
        };
        locale?: string;
        localizations?: {
            id?: number;
            documentId?: string;
          }[];
      };
      updatedBy?: {
        id?: number;
        documentId?: string;
      };
      locale?: string;
      localizations?: {
          id?: number;
          documentId?: string;
          label?: string;
          value?: string;
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          updatedAt?: string;
          /** Format: date-time */
          publishedAt?: string;
          createdBy?: {
            id?: number;
            documentId?: string;
          };
          updatedBy?: {
            id?: number;
            documentId?: string;
          };
          locale?: string;
          localizations?: {
              id?: number;
              documentId?: string;
            }[];
          strapi_stage?: {
            id?: number;
            documentId?: string;
            name?: string;
            color?: string;
            workflow?: {
              id?: number;
              documentId?: string;
              name?: string;
              stages?: {
                  id?: number;
                  documentId?: string;
                }[];
              stageRequiredToPublish?: {
                id?: number;
                documentId?: string;
              };
              contentTypes?: unknown;
              /** Format: date-time */
              createdAt?: string;
              /** Format: date-time */
              updatedAt?: string;
              /** Format: date-time */
              publishedAt?: string;
              createdBy?: {
                id?: number;
                documentId?: string;
              };
              updatedBy?: {
                id?: number;
                documentId?: string;
              };
              locale?: string;
              localizations?: {
                  id?: number;
                  documentId?: string;
                }[];
            };
            permissions?: {
                id?: number;
                documentId?: string;
              }[];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              id?: number;
              documentId?: string;
            };
            updatedBy?: {
              id?: number;
              documentId?: string;
            };
            locale?: string;
            localizations?: {
                id?: number;
                documentId?: string;
              }[];
          };
          strapi_assignee?: {
            id?: number;
            documentId?: string;
          };
        }[];
      strapi_stage?: {
        id?: number;
        documentId?: string;
      };
      strapi_assignee?: {
        id?: number;
        documentId?: string;
      };
    };
    CategoryResponse: {
      data?: components["schemas"]["Category"];
      meta?: Record<string, never>;
    };
    EventsPageRequest: {
      data: {
        nav_items?: components["schemas"]["NavigationEventCardComponent"][];
        locale?: string;
        localizations?: (number | string)[];
        /** @example string or id */
        strapi_stage?: number | string;
        /** @example string or id */
        strapi_assignee?: number | string;
      };
    };
    EventsPageListResponse: {
      data?: components["schemas"]["EventsPage"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    EventsPage: {
      id?: number;
      documentId?: string;
      nav_items?: components["schemas"]["NavigationEventCardComponent"][];
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        id?: number;
        documentId?: string;
      };
      updatedBy?: {
        id?: number;
        documentId?: string;
      };
      locale?: string;
      localizations?: {
          id?: number;
          documentId?: string;
          nav_items?: components["schemas"]["NavigationEventCardComponent"][];
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          updatedAt?: string;
          /** Format: date-time */
          publishedAt?: string;
          createdBy?: {
            id?: number;
            documentId?: string;
          };
          updatedBy?: {
            id?: number;
            documentId?: string;
          };
          locale?: string;
          localizations?: {
              id?: number;
              documentId?: string;
            }[];
          strapi_stage?: {
            id?: number;
            documentId?: string;
            name?: string;
            color?: string;
            workflow?: {
              id?: number;
              documentId?: string;
              name?: string;
              stages?: {
                  id?: number;
                  documentId?: string;
                }[];
              stageRequiredToPublish?: {
                id?: number;
                documentId?: string;
              };
              contentTypes?: unknown;
              /** Format: date-time */
              createdAt?: string;
              /** Format: date-time */
              updatedAt?: string;
              /** Format: date-time */
              publishedAt?: string;
              createdBy?: {
                id?: number;
                documentId?: string;
              };
              updatedBy?: {
                id?: number;
                documentId?: string;
              };
              locale?: string;
              localizations?: {
                  id?: number;
                  documentId?: string;
                }[];
            };
            permissions?: {
                id?: number;
                documentId?: string;
              }[];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              id?: number;
              documentId?: string;
            };
            updatedBy?: {
              id?: number;
              documentId?: string;
            };
            locale?: string;
            localizations?: {
                id?: number;
                documentId?: string;
              }[];
          };
          strapi_assignee?: {
            id?: number;
            documentId?: string;
          };
        }[];
      strapi_stage?: {
        id?: number;
        documentId?: string;
      };
      strapi_assignee?: {
        id?: number;
        documentId?: string;
      };
    };
    EventsPageResponse: {
      data?: components["schemas"]["EventsPage"];
      meta?: Record<string, never>;
    };
    NavigationEventCardComponent: {
      id?: number;
      label?: string;
      caption?: string;
      path?: string;
      photo?: {
        id?: number;
        documentId?: string;
        name?: string;
        alternativeText?: string;
        caption?: string;
        width?: number;
        height?: number;
        formats?: unknown;
        hash?: string;
        ext?: string;
        mime?: string;
        /** Format: float */
        size?: number;
        url?: string;
        previewUrl?: string;
        provider?: string;
        provider_metadata?: unknown;
        related?: {
            id?: number;
            documentId?: string;
          }[];
        folder?: {
          id?: number;
          documentId?: string;
        };
        folderPath?: string;
        sourceName?: string;
        sourceUrl?: string;
        /** Format: date-time */
        createdAt?: string;
        /** Format: date-time */
        updatedAt?: string;
        /** Format: date-time */
        publishedAt?: string;
        createdBy?: {
          id?: number;
          documentId?: string;
        };
        updatedBy?: {
          id?: number;
          documentId?: string;
        };
        locale?: string;
        localizations?: {
            id?: number;
            documentId?: string;
          }[];
      };
    };
    FormsAndDocumentsPageRequest: {
      data: {
        file_group?: components["schemas"]["TablesFileDetailsComponent"][];
        locale?: string;
        localizations?: (number | string)[];
        /** @example string or id */
        strapi_stage?: number | string;
        /** @example string or id */
        strapi_assignee?: number | string;
      };
    };
    FormsAndDocumentsPageListResponse: {
      data?: components["schemas"]["FormsAndDocumentsPage"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    FormsAndDocumentsPage: {
      id?: number;
      documentId?: string;
      file_group?: components["schemas"]["TablesFileDetailsComponent"][];
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        id?: number;
        documentId?: string;
      };
      updatedBy?: {
        id?: number;
        documentId?: string;
      };
      locale?: string;
      localizations?: {
          id?: number;
          documentId?: string;
          file_group?: components["schemas"]["TablesFileDetailsComponent"][];
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          updatedAt?: string;
          /** Format: date-time */
          publishedAt?: string;
          createdBy?: {
            id?: number;
            documentId?: string;
          };
          updatedBy?: {
            id?: number;
            documentId?: string;
          };
          locale?: string;
          localizations?: {
              id?: number;
              documentId?: string;
            }[];
          strapi_stage?: {
            id?: number;
            documentId?: string;
            name?: string;
            color?: string;
            workflow?: {
              id?: number;
              documentId?: string;
              name?: string;
              stages?: {
                  id?: number;
                  documentId?: string;
                }[];
              stageRequiredToPublish?: {
                id?: number;
                documentId?: string;
              };
              contentTypes?: unknown;
              /** Format: date-time */
              createdAt?: string;
              /** Format: date-time */
              updatedAt?: string;
              /** Format: date-time */
              publishedAt?: string;
              createdBy?: {
                id?: number;
                documentId?: string;
              };
              updatedBy?: {
                id?: number;
                documentId?: string;
              };
              locale?: string;
              localizations?: {
                  id?: number;
                  documentId?: string;
                }[];
            };
            permissions?: {
                id?: number;
                documentId?: string;
              }[];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              id?: number;
              documentId?: string;
            };
            updatedBy?: {
              id?: number;
              documentId?: string;
            };
            locale?: string;
            localizations?: {
                id?: number;
                documentId?: string;
              }[];
          };
          strapi_assignee?: {
            id?: number;
            documentId?: string;
          };
        }[];
      strapi_stage?: {
        id?: number;
        documentId?: string;
      };
      strapi_assignee?: {
        id?: number;
        documentId?: string;
      };
    };
    FormsAndDocumentsPageResponse: {
      data?: components["schemas"]["FormsAndDocumentsPage"];
      meta?: Record<string, never>;
    };
    TablesFileDetailsComponent: {
      id?: number;
      label?: string;
      documents?: {
          id?: number;
          documentId?: string;
          name?: string;
          alternativeText?: string;
          caption?: string;
          width?: number;
          height?: number;
          formats?: unknown;
          hash?: string;
          ext?: string;
          mime?: string;
          /** Format: float */
          size?: number;
          url?: string;
          previewUrl?: string;
          provider?: string;
          provider_metadata?: unknown;
          related?: {
              id?: number;
              documentId?: string;
            }[];
          folder?: {
            id?: number;
            documentId?: string;
          };
          folderPath?: string;
          sourceName?: string;
          sourceUrl?: string;
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          updatedAt?: string;
          /** Format: date-time */
          publishedAt?: string;
          createdBy?: {
            id?: number;
            documentId?: string;
          };
          updatedBy?: {
            id?: number;
            documentId?: string;
          };
          locale?: string;
          localizations?: {
              id?: number;
              documentId?: string;
            }[];
        }[];
      manual?: unknown;
    };
    HomePageRequest: {
      data: {
        announcement_cards: components["schemas"]["NavigationAnnouncementCardComponent"][];
        locale?: string;
        localizations?: (number | string)[];
        /** @example string or id */
        strapi_stage?: number | string;
        /** @example string or id */
        strapi_assignee?: number | string;
      };
    };
    HomePageListResponse: {
      data?: components["schemas"]["HomePage"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    HomePage: {
      id?: number;
      documentId?: string;
      announcement_cards: components["schemas"]["NavigationAnnouncementCardComponent"][];
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        id?: number;
        documentId?: string;
      };
      updatedBy?: {
        id?: number;
        documentId?: string;
      };
      locale?: string;
      localizations?: {
          id?: number;
          documentId?: string;
          announcement_cards?: components["schemas"]["NavigationAnnouncementCardComponent"][];
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          updatedAt?: string;
          /** Format: date-time */
          publishedAt?: string;
          createdBy?: {
            id?: number;
            documentId?: string;
          };
          updatedBy?: {
            id?: number;
            documentId?: string;
          };
          locale?: string;
          localizations?: {
              id?: number;
              documentId?: string;
            }[];
          strapi_stage?: {
            id?: number;
            documentId?: string;
            name?: string;
            color?: string;
            workflow?: {
              id?: number;
              documentId?: string;
              name?: string;
              stages?: {
                  id?: number;
                  documentId?: string;
                }[];
              stageRequiredToPublish?: {
                id?: number;
                documentId?: string;
              };
              contentTypes?: unknown;
              /** Format: date-time */
              createdAt?: string;
              /** Format: date-time */
              updatedAt?: string;
              /** Format: date-time */
              publishedAt?: string;
              createdBy?: {
                id?: number;
                documentId?: string;
              };
              updatedBy?: {
                id?: number;
                documentId?: string;
              };
              locale?: string;
              localizations?: {
                  id?: number;
                  documentId?: string;
                }[];
            };
            permissions?: {
                id?: number;
                documentId?: string;
              }[];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              id?: number;
              documentId?: string;
            };
            updatedBy?: {
              id?: number;
              documentId?: string;
            };
            locale?: string;
            localizations?: {
                id?: number;
                documentId?: string;
              }[];
          };
          strapi_assignee?: {
            id?: number;
            documentId?: string;
          };
        }[];
      strapi_stage?: {
        id?: number;
        documentId?: string;
      };
      strapi_assignee?: {
        id?: number;
        documentId?: string;
      };
    };
    HomePageResponse: {
      data?: components["schemas"]["HomePage"];
      meta?: Record<string, never>;
    };
    NavigationAnnouncementCardComponent: {
      id?: number;
      title?: string;
      subtitle?: string;
      link?: string;
      link_text?: string;
      background_photo?: {
        id?: number;
        documentId?: string;
        name?: string;
        alternativeText?: string;
        caption?: string;
        width?: number;
        height?: number;
        formats?: unknown;
        hash?: string;
        ext?: string;
        mime?: string;
        /** Format: float */
        size?: number;
        url?: string;
        previewUrl?: string;
        provider?: string;
        provider_metadata?: unknown;
        related?: {
            id?: number;
            documentId?: string;
          }[];
        folder?: {
          id?: number;
          documentId?: string;
        };
        folderPath?: string;
        sourceName?: string;
        sourceUrl?: string;
        /** Format: date-time */
        createdAt?: string;
        /** Format: date-time */
        updatedAt?: string;
        /** Format: date-time */
        publishedAt?: string;
        createdBy?: {
          id?: number;
          documentId?: string;
        };
        updatedBy?: {
          id?: number;
          documentId?: string;
        };
        locale?: string;
        localizations?: {
            id?: number;
            documentId?: string;
          }[];
      };
    };
    NavigationRequest: {
      data: {
        nav_groups: components["schemas"]["NavigationNavigationGroupComponent"][];
        locale?: string;
        localizations?: (number | string)[];
        /** @example string or id */
        strapi_stage?: number | string;
        /** @example string or id */
        strapi_assignee?: number | string;
      };
    };
    NavigationListResponse: {
      data?: components["schemas"]["Navigation"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    Navigation: {
      id?: number;
      documentId?: string;
      nav_groups: components["schemas"]["NavigationNavigationGroupComponent"][];
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        id?: number;
        documentId?: string;
        firstname?: string;
        lastname?: string;
        username?: string;
        /** Format: email */
        email?: string;
        resetPasswordToken?: string;
        registrationToken?: string;
        isActive?: boolean;
        roles?: {
            id?: number;
            documentId?: string;
            name?: string;
            code?: string;
            description?: string;
            users?: {
                id?: number;
                documentId?: string;
              }[];
            permissions?: {
                id?: number;
                documentId?: string;
                action?: string;
                actionParameters?: unknown;
                subject?: string;
                properties?: unknown;
                conditions?: unknown;
                role?: {
                  id?: number;
                  documentId?: string;
                };
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                /** Format: date-time */
                publishedAt?: string;
                createdBy?: {
                  id?: number;
                  documentId?: string;
                };
                updatedBy?: {
                  id?: number;
                  documentId?: string;
                };
                locale?: string;
                localizations?: {
                    id?: number;
                    documentId?: string;
                  }[];
              }[];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              id?: number;
              documentId?: string;
            };
            updatedBy?: {
              id?: number;
              documentId?: string;
            };
            locale?: string;
            localizations?: {
                id?: number;
                documentId?: string;
              }[];
          }[];
        blocked?: boolean;
        preferedLanguage?: string;
        /** Format: date-time */
        createdAt?: string;
        /** Format: date-time */
        updatedAt?: string;
        /** Format: date-time */
        publishedAt?: string;
        createdBy?: {
          id?: number;
          documentId?: string;
        };
        updatedBy?: {
          id?: number;
          documentId?: string;
        };
        locale?: string;
        localizations?: {
            id?: number;
            documentId?: string;
          }[];
      };
      updatedBy?: {
        id?: number;
        documentId?: string;
      };
      locale?: string;
      localizations?: {
          id?: number;
          documentId?: string;
          nav_groups?: components["schemas"]["NavigationNavigationGroupComponent"][];
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          updatedAt?: string;
          /** Format: date-time */
          publishedAt?: string;
          createdBy?: {
            id?: number;
            documentId?: string;
          };
          updatedBy?: {
            id?: number;
            documentId?: string;
          };
          locale?: string;
          localizations?: {
              id?: number;
              documentId?: string;
            }[];
          strapi_stage?: {
            id?: number;
            documentId?: string;
            name?: string;
            color?: string;
            workflow?: {
              id?: number;
              documentId?: string;
              name?: string;
              stages?: {
                  id?: number;
                  documentId?: string;
                }[];
              stageRequiredToPublish?: {
                id?: number;
                documentId?: string;
              };
              contentTypes?: unknown;
              /** Format: date-time */
              createdAt?: string;
              /** Format: date-time */
              updatedAt?: string;
              /** Format: date-time */
              publishedAt?: string;
              createdBy?: {
                id?: number;
                documentId?: string;
              };
              updatedBy?: {
                id?: number;
                documentId?: string;
              };
              locale?: string;
              localizations?: {
                  id?: number;
                  documentId?: string;
                }[];
            };
            permissions?: {
                id?: number;
                documentId?: string;
              }[];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              id?: number;
              documentId?: string;
            };
            updatedBy?: {
              id?: number;
              documentId?: string;
            };
            locale?: string;
            localizations?: {
                id?: number;
                documentId?: string;
              }[];
          };
          strapi_assignee?: {
            id?: number;
            documentId?: string;
          };
        }[];
      strapi_stage?: {
        id?: number;
        documentId?: string;
      };
      strapi_assignee?: {
        id?: number;
        documentId?: string;
      };
    };
    NavigationResponse: {
      data?: components["schemas"]["Navigation"];
      meta?: Record<string, never>;
    };
    NavigationNavigationItemComponent: {
      id?: number;
      label?: string;
      path?: string;
    };
    NavigationNavigationGroupComponent: {
      id?: number;
      label?: string;
      show_in_horizontal_nav?: boolean;
      items?: components["schemas"]["NavigationNavigationItemComponent"][];
    };
    NewsletterRequest: {
      data: {
        version3?: components["schemas"]["EmailAnnouncementsV3Component"];
        version2?: components["schemas"]["EmailAnnouncementsV2Component"];
        name: string;
        manual_calendar?: components["schemas"]["EmailManualCalendarMonthComponent"][];
        locale?: string;
        localizations?: (number | string)[];
        /** @example string or id */
        strapi_stage?: number | string;
        /** @example string or id */
        strapi_assignee?: number | string;
        /** @enum {string} */
        stage?: "draft" | "modified" | "published";
        /** Format: date */
        shortPublishedAt?: string;
        previewId?: string;
        object_id?: string;
        relationLabel?: string;
      };
    };
    NewsletterListResponse: {
      data?: components["schemas"]["Newsletter"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    Newsletter: {
      id?: number;
      documentId?: string;
      version3?: components["schemas"]["EmailAnnouncementsV3Component"];
      version2?: components["schemas"]["EmailAnnouncementsV2Component"];
      name: string;
      manual_calendar?: components["schemas"]["EmailManualCalendarMonthComponent"][];
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        id?: number;
        documentId?: string;
      };
      updatedBy?: {
        id?: number;
        documentId?: string;
      };
      locale?: string;
      localizations?: ({
          id?: number;
          documentId?: string;
          version3?: components["schemas"]["EmailAnnouncementsV3Component"];
          version2?: components["schemas"]["EmailAnnouncementsV2Component"];
          name?: string;
          manual_calendar?: components["schemas"]["EmailManualCalendarMonthComponent"][];
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          updatedAt?: string;
          /** Format: date-time */
          publishedAt?: string;
          createdBy?: {
            id?: number;
            documentId?: string;
          };
          updatedBy?: {
            id?: number;
            documentId?: string;
          };
          locale?: string;
          localizations?: {
              id?: number;
              documentId?: string;
            }[];
          strapi_stage?: {
            id?: number;
            documentId?: string;
          };
          strapi_assignee?: {
            id?: number;
            documentId?: string;
          };
          /** @enum {string} */
          stage?: "draft" | "modified" | "published";
          /** Format: date */
          shortPublishedAt?: string;
          previewId?: string;
          object_id?: string;
          relationLabel?: string;
        })[];
      strapi_stage?: {
        id?: number;
        documentId?: string;
      };
      strapi_assignee?: {
        id?: number;
        documentId?: string;
      };
      /** @enum {string} */
      stage?: "draft" | "modified" | "published";
      /** Format: date */
      shortPublishedAt?: string;
      previewId?: string;
      object_id?: string;
      relationLabel?: string;
    };
    NewsletterResponse: {
      data?: components["schemas"]["Newsletter"];
      meta?: Record<string, never>;
    };
    EmailAnnouncementsV3Component: {
      id?: number;
      pinned_mini_posts?: {
          id?: number;
          documentId?: string;
        }[];
      announcements?: {
          id?: number;
          documentId?: string;
        }[];
      past_announcements?: {
          id?: number;
          documentId?: string;
        }[];
    };
    EmailAnnouncementsV2Component: {
      id?: number;
      pinned_mini_posts?: {
          id?: number;
          documentId?: string;
        }[];
      posts?: {
          id?: number;
          documentId?: string;
        }[];
      fundraiser_mini_posts?: {
          id?: number;
          documentId?: string;
        }[];
      camping_mini_posts?: {
          id?: number;
          documentId?: string;
        }[];
      service_mini_posts?: {
          id?: number;
          documentId?: string;
        }[];
      advancement_mini_posts?: {
          id?: number;
          documentId?: string;
        }[];
      high_adventure_mini_posts?: {
          id?: number;
          documentId?: string;
        }[];
    };
    EmailManualCalendarMonthComponent: {
      id?: number;
      /** @enum {string} */
      __component?: "email.manual-calendar-month";
      month?: string;
      events?: string;
    };
    PageRequest: {
      data: {
        title: string;
        path: string;
        enable_password_protection: boolean;
        dual_columns?: boolean;
        body?: string;
        quick_links?: components["schemas"]["PagesQuickLinkTopOfPageComponent"][];
        alert?: string;
        toc_h3_enabled?: boolean;
        center_text?: boolean;
        show_table_of_contents?: boolean;
        cristata_id?: string;
        locale?: string;
        localizations?: (number | string)[];
        /** @example string or id */
        strapi_stage?: number | string;
        /** @example string or id */
        strapi_assignee?: number | string;
        /** @enum {string} */
        stage?: "draft" | "modified" | "published";
        /** Format: date */
        shortPublishedAt?: string;
        previewId?: string;
        object_id?: string;
        relationLabel?: string;
      };
    };
    PageListResponse: {
      data?: components["schemas"]["Page"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    Page: {
      id?: number;
      documentId?: string;
      title: string;
      path: string;
      enable_password_protection: boolean;
      dual_columns?: boolean;
      body?: string;
      quick_links?: components["schemas"]["PagesQuickLinkTopOfPageComponent"][];
      alert?: string;
      toc_h3_enabled?: boolean;
      center_text?: boolean;
      show_table_of_contents?: boolean;
      cristata_id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        id?: number;
        documentId?: string;
        firstname?: string;
        lastname?: string;
        username?: string;
        /** Format: email */
        email?: string;
        resetPasswordToken?: string;
        registrationToken?: string;
        isActive?: boolean;
        roles?: {
            id?: number;
            documentId?: string;
            name?: string;
            code?: string;
            description?: string;
            users?: {
                id?: number;
                documentId?: string;
              }[];
            permissions?: {
                id?: number;
                documentId?: string;
                action?: string;
                actionParameters?: unknown;
                subject?: string;
                properties?: unknown;
                conditions?: unknown;
                role?: {
                  id?: number;
                  documentId?: string;
                };
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                /** Format: date-time */
                publishedAt?: string;
                createdBy?: {
                  id?: number;
                  documentId?: string;
                };
                updatedBy?: {
                  id?: number;
                  documentId?: string;
                };
                locale?: string;
                localizations?: {
                    id?: number;
                    documentId?: string;
                  }[];
              }[];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              id?: number;
              documentId?: string;
            };
            updatedBy?: {
              id?: number;
              documentId?: string;
            };
            locale?: string;
            localizations?: {
                id?: number;
                documentId?: string;
              }[];
          }[];
        blocked?: boolean;
        preferedLanguage?: string;
        /** Format: date-time */
        createdAt?: string;
        /** Format: date-time */
        updatedAt?: string;
        /** Format: date-time */
        publishedAt?: string;
        createdBy?: {
          id?: number;
          documentId?: string;
        };
        updatedBy?: {
          id?: number;
          documentId?: string;
        };
        locale?: string;
        localizations?: {
            id?: number;
            documentId?: string;
          }[];
      };
      updatedBy?: {
        id?: number;
        documentId?: string;
      };
      locale?: string;
      localizations?: ({
          id?: number;
          documentId?: string;
          title?: string;
          path?: string;
          enable_password_protection?: boolean;
          dual_columns?: boolean;
          body?: string;
          quick_links?: components["schemas"]["PagesQuickLinkTopOfPageComponent"][];
          alert?: string;
          toc_h3_enabled?: boolean;
          center_text?: boolean;
          show_table_of_contents?: boolean;
          cristata_id?: string;
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          updatedAt?: string;
          /** Format: date-time */
          publishedAt?: string;
          createdBy?: {
            id?: number;
            documentId?: string;
          };
          updatedBy?: {
            id?: number;
            documentId?: string;
          };
          locale?: string;
          localizations?: {
              id?: number;
              documentId?: string;
            }[];
          strapi_stage?: {
            id?: number;
            documentId?: string;
            name?: string;
            color?: string;
            workflow?: {
              id?: number;
              documentId?: string;
              name?: string;
              stages?: {
                  id?: number;
                  documentId?: string;
                }[];
              stageRequiredToPublish?: {
                id?: number;
                documentId?: string;
              };
              contentTypes?: unknown;
              /** Format: date-time */
              createdAt?: string;
              /** Format: date-time */
              updatedAt?: string;
              /** Format: date-time */
              publishedAt?: string;
              createdBy?: {
                id?: number;
                documentId?: string;
              };
              updatedBy?: {
                id?: number;
                documentId?: string;
              };
              locale?: string;
              localizations?: {
                  id?: number;
                  documentId?: string;
                }[];
            };
            permissions?: {
                id?: number;
                documentId?: string;
              }[];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              id?: number;
              documentId?: string;
            };
            updatedBy?: {
              id?: number;
              documentId?: string;
            };
            locale?: string;
            localizations?: {
                id?: number;
                documentId?: string;
              }[];
          };
          strapi_assignee?: {
            id?: number;
            documentId?: string;
          };
          /** @enum {string} */
          stage?: "draft" | "modified" | "published";
          /** Format: date */
          shortPublishedAt?: string;
          previewId?: string;
          object_id?: string;
          relationLabel?: string;
        })[];
      strapi_stage?: {
        id?: number;
        documentId?: string;
      };
      strapi_assignee?: {
        id?: number;
        documentId?: string;
      };
      /** @enum {string} */
      stage?: "draft" | "modified" | "published";
      /** Format: date */
      shortPublishedAt?: string;
      previewId?: string;
      object_id?: string;
      relationLabel?: string;
    };
    PageResponse: {
      data?: components["schemas"]["Page"];
      meta?: Record<string, never>;
    };
    PagesQuickLinkTopOfPageComponent: {
      id?: number;
      label?: string;
      path?: string;
    };
    PostRequest: {
      data: {
        title: string;
        subtitle?: string;
        body?: string;
        enable_password_protection: boolean;
        button_text: string;
        /** @example string or id */
        category?: number | string;
        slug: string;
        tags?: (number | string)[];
        submitted_by: string;
        legacy_body?: unknown;
        /** @enum {string} */
        theme?: "post" | "blog";
        /** @example string or id */
        cover_photo?: number | string;
        cover_photo_caption?: string;
        locale?: string;
        localizations?: (number | string)[];
        /** @example string or id */
        strapi_stage?: number | string;
        /** @example string or id */
        strapi_assignee?: number | string;
        /** @enum {string} */
        stage?: "draft" | "modified" | "published";
        /** Format: date */
        shortPublishedAt?: string;
        previewId?: string;
        object_id?: string;
        relationLabel?: string;
      };
    };
    PostListResponse: {
      data?: components["schemas"]["Post"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    Post: {
      id?: number;
      documentId?: string;
      title: string;
      subtitle?: string;
      body?: string;
      enable_password_protection: boolean;
      button_text: string;
      category?: {
        id?: number;
        documentId?: string;
        label?: string;
        value?: string;
        /** Format: date-time */
        createdAt?: string;
        /** Format: date-time */
        updatedAt?: string;
        /** Format: date-time */
        publishedAt?: string;
        createdBy?: {
          id?: number;
          documentId?: string;
          firstname?: string;
          lastname?: string;
          username?: string;
          /** Format: email */
          email?: string;
          resetPasswordToken?: string;
          registrationToken?: string;
          isActive?: boolean;
          roles?: {
              id?: number;
              documentId?: string;
              name?: string;
              code?: string;
              description?: string;
              users?: {
                  id?: number;
                  documentId?: string;
                }[];
              permissions?: {
                  id?: number;
                  documentId?: string;
                  action?: string;
                  actionParameters?: unknown;
                  subject?: string;
                  properties?: unknown;
                  conditions?: unknown;
                  role?: {
                    id?: number;
                    documentId?: string;
                  };
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  /** Format: date-time */
                  publishedAt?: string;
                  createdBy?: {
                    id?: number;
                    documentId?: string;
                  };
                  updatedBy?: {
                    id?: number;
                    documentId?: string;
                  };
                  locale?: string;
                  localizations?: {
                      id?: number;
                      documentId?: string;
                    }[];
                }[];
              /** Format: date-time */
              createdAt?: string;
              /** Format: date-time */
              updatedAt?: string;
              /** Format: date-time */
              publishedAt?: string;
              createdBy?: {
                id?: number;
                documentId?: string;
              };
              updatedBy?: {
                id?: number;
                documentId?: string;
              };
              locale?: string;
              localizations?: {
                  id?: number;
                  documentId?: string;
                }[];
            }[];
          blocked?: boolean;
          preferedLanguage?: string;
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          updatedAt?: string;
          /** Format: date-time */
          publishedAt?: string;
          createdBy?: {
            id?: number;
            documentId?: string;
          };
          updatedBy?: {
            id?: number;
            documentId?: string;
          };
          locale?: string;
          localizations?: {
              id?: number;
              documentId?: string;
            }[];
        };
        updatedBy?: {
          id?: number;
          documentId?: string;
        };
        locale?: string;
        localizations?: {
            id?: number;
            documentId?: string;
          }[];
        strapi_stage?: {
          id?: number;
          documentId?: string;
          name?: string;
          color?: string;
          workflow?: {
            id?: number;
            documentId?: string;
            name?: string;
            stages?: {
                id?: number;
                documentId?: string;
              }[];
            stageRequiredToPublish?: {
              id?: number;
              documentId?: string;
            };
            contentTypes?: unknown;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              id?: number;
              documentId?: string;
            };
            updatedBy?: {
              id?: number;
              documentId?: string;
            };
            locale?: string;
            localizations?: {
                id?: number;
                documentId?: string;
              }[];
          };
          permissions?: {
              id?: number;
              documentId?: string;
            }[];
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          updatedAt?: string;
          /** Format: date-time */
          publishedAt?: string;
          createdBy?: {
            id?: number;
            documentId?: string;
          };
          updatedBy?: {
            id?: number;
            documentId?: string;
          };
          locale?: string;
          localizations?: {
              id?: number;
              documentId?: string;
            }[];
        };
        strapi_assignee?: {
          id?: number;
          documentId?: string;
        };
      };
      slug: string;
      tags?: {
          id?: number;
          documentId?: string;
          label?: string;
          value?: string;
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          updatedAt?: string;
          /** Format: date-time */
          publishedAt?: string;
          createdBy?: {
            id?: number;
            documentId?: string;
          };
          updatedBy?: {
            id?: number;
            documentId?: string;
          };
          locale?: string;
          localizations?: {
              id?: number;
              documentId?: string;
            }[];
          strapi_stage?: {
            id?: number;
            documentId?: string;
          };
          strapi_assignee?: {
            id?: number;
            documentId?: string;
          };
        }[];
      submitted_by: string;
      legacy_body?: unknown;
      /** @enum {string} */
      theme?: "post" | "blog";
      cover_photo?: {
        id?: number;
        documentId?: string;
        name?: string;
        alternativeText?: string;
        caption?: string;
        width?: number;
        height?: number;
        formats?: unknown;
        hash?: string;
        ext?: string;
        mime?: string;
        /** Format: float */
        size?: number;
        url?: string;
        previewUrl?: string;
        provider?: string;
        provider_metadata?: unknown;
        related?: {
            id?: number;
            documentId?: string;
          }[];
        folder?: {
          id?: number;
          documentId?: string;
          name?: string;
          pathId?: number;
          parent?: {
            id?: number;
            documentId?: string;
          };
          children?: {
              id?: number;
              documentId?: string;
            }[];
          files?: {
              id?: number;
              documentId?: string;
              name?: string;
              alternativeText?: string;
              caption?: string;
              width?: number;
              height?: number;
              formats?: unknown;
              hash?: string;
              ext?: string;
              mime?: string;
              /** Format: float */
              size?: number;
              url?: string;
              previewUrl?: string;
              provider?: string;
              provider_metadata?: unknown;
              related?: {
                  id?: number;
                  documentId?: string;
                }[];
              folder?: {
                id?: number;
                documentId?: string;
              };
              folderPath?: string;
              sourceName?: string;
              sourceUrl?: string;
              /** Format: date-time */
              createdAt?: string;
              /** Format: date-time */
              updatedAt?: string;
              /** Format: date-time */
              publishedAt?: string;
              createdBy?: {
                id?: number;
                documentId?: string;
              };
              updatedBy?: {
                id?: number;
                documentId?: string;
              };
              locale?: string;
              localizations?: {
                  id?: number;
                  documentId?: string;
                }[];
            }[];
          path?: string;
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          updatedAt?: string;
          /** Format: date-time */
          publishedAt?: string;
          createdBy?: {
            id?: number;
            documentId?: string;
          };
          updatedBy?: {
            id?: number;
            documentId?: string;
          };
          locale?: string;
          localizations?: {
              id?: number;
              documentId?: string;
            }[];
        };
        folderPath?: string;
        sourceName?: string;
        sourceUrl?: string;
        /** Format: date-time */
        createdAt?: string;
        /** Format: date-time */
        updatedAt?: string;
        /** Format: date-time */
        publishedAt?: string;
        createdBy?: {
          id?: number;
          documentId?: string;
        };
        updatedBy?: {
          id?: number;
          documentId?: string;
        };
        locale?: string;
        localizations?: {
            id?: number;
            documentId?: string;
          }[];
      };
      cover_photo_caption?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        id?: number;
        documentId?: string;
      };
      updatedBy?: {
        id?: number;
        documentId?: string;
      };
      locale?: string;
      localizations?: ({
          id?: number;
          documentId?: string;
          title?: string;
          subtitle?: string;
          body?: string;
          enable_password_protection?: boolean;
          button_text?: string;
          category?: {
            id?: number;
            documentId?: string;
          };
          slug?: string;
          tags?: {
              id?: number;
              documentId?: string;
            }[];
          submitted_by?: string;
          legacy_body?: unknown;
          /** @enum {string} */
          theme?: "post" | "blog";
          cover_photo?: {
            id?: number;
            documentId?: string;
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
                id?: number;
                documentId?: string;
              }[];
            folder?: {
              id?: number;
              documentId?: string;
            };
            folderPath?: string;
            sourceName?: string;
            sourceUrl?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              id?: number;
              documentId?: string;
            };
            updatedBy?: {
              id?: number;
              documentId?: string;
            };
            locale?: string;
            localizations?: {
                id?: number;
                documentId?: string;
              }[];
          };
          cover_photo_caption?: string;
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          updatedAt?: string;
          /** Format: date-time */
          publishedAt?: string;
          createdBy?: {
            id?: number;
            documentId?: string;
          };
          updatedBy?: {
            id?: number;
            documentId?: string;
          };
          locale?: string;
          localizations?: {
              id?: number;
              documentId?: string;
            }[];
          strapi_stage?: {
            id?: number;
            documentId?: string;
          };
          strapi_assignee?: {
            id?: number;
            documentId?: string;
          };
          /** @enum {string} */
          stage?: "draft" | "modified" | "published";
          /** Format: date */
          shortPublishedAt?: string;
          previewId?: string;
          object_id?: string;
          relationLabel?: string;
        })[];
      strapi_stage?: {
        id?: number;
        documentId?: string;
      };
      strapi_assignee?: {
        id?: number;
        documentId?: string;
      };
      /** @enum {string} */
      stage?: "draft" | "modified" | "published";
      /** Format: date */
      shortPublishedAt?: string;
      previewId?: string;
      object_id?: string;
      relationLabel?: string;
    };
    PostResponse: {
      data?: components["schemas"]["Post"];
      meta?: Record<string, never>;
    };
    RedirectRequest: {
      data: {
        from: string;
        to: string;
        locale?: string;
        localizations?: (number | string)[];
        /** @example string or id */
        strapi_stage?: number | string;
        /** @example string or id */
        strapi_assignee?: number | string;
      };
    };
    RedirectListResponse: {
      data?: components["schemas"]["Redirect"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    Redirect: {
      id?: number;
      documentId?: string;
      from: string;
      to: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        id?: number;
        documentId?: string;
        firstname?: string;
        lastname?: string;
        username?: string;
        /** Format: email */
        email?: string;
        resetPasswordToken?: string;
        registrationToken?: string;
        isActive?: boolean;
        roles?: {
            id?: number;
            documentId?: string;
            name?: string;
            code?: string;
            description?: string;
            users?: {
                id?: number;
                documentId?: string;
              }[];
            permissions?: {
                id?: number;
                documentId?: string;
                action?: string;
                actionParameters?: unknown;
                subject?: string;
                properties?: unknown;
                conditions?: unknown;
                role?: {
                  id?: number;
                  documentId?: string;
                };
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                /** Format: date-time */
                publishedAt?: string;
                createdBy?: {
                  id?: number;
                  documentId?: string;
                };
                updatedBy?: {
                  id?: number;
                  documentId?: string;
                };
                locale?: string;
                localizations?: {
                    id?: number;
                    documentId?: string;
                  }[];
              }[];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              id?: number;
              documentId?: string;
            };
            updatedBy?: {
              id?: number;
              documentId?: string;
            };
            locale?: string;
            localizations?: {
                id?: number;
                documentId?: string;
              }[];
          }[];
        blocked?: boolean;
        preferedLanguage?: string;
        /** Format: date-time */
        createdAt?: string;
        /** Format: date-time */
        updatedAt?: string;
        /** Format: date-time */
        publishedAt?: string;
        createdBy?: {
          id?: number;
          documentId?: string;
        };
        updatedBy?: {
          id?: number;
          documentId?: string;
        };
        locale?: string;
        localizations?: {
            id?: number;
            documentId?: string;
          }[];
      };
      updatedBy?: {
        id?: number;
        documentId?: string;
      };
      locale?: string;
      localizations?: {
          id?: number;
          documentId?: string;
          from?: string;
          to?: string;
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          updatedAt?: string;
          /** Format: date-time */
          publishedAt?: string;
          createdBy?: {
            id?: number;
            documentId?: string;
          };
          updatedBy?: {
            id?: number;
            documentId?: string;
          };
          locale?: string;
          localizations?: {
              id?: number;
              documentId?: string;
            }[];
          strapi_stage?: {
            id?: number;
            documentId?: string;
            name?: string;
            color?: string;
            workflow?: {
              id?: number;
              documentId?: string;
              name?: string;
              stages?: {
                  id?: number;
                  documentId?: string;
                }[];
              stageRequiredToPublish?: {
                id?: number;
                documentId?: string;
              };
              contentTypes?: unknown;
              /** Format: date-time */
              createdAt?: string;
              /** Format: date-time */
              updatedAt?: string;
              /** Format: date-time */
              publishedAt?: string;
              createdBy?: {
                id?: number;
                documentId?: string;
              };
              updatedBy?: {
                id?: number;
                documentId?: string;
              };
              locale?: string;
              localizations?: {
                  id?: number;
                  documentId?: string;
                }[];
            };
            permissions?: {
                id?: number;
                documentId?: string;
              }[];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              id?: number;
              documentId?: string;
            };
            updatedBy?: {
              id?: number;
              documentId?: string;
            };
            locale?: string;
            localizations?: {
                id?: number;
                documentId?: string;
              }[];
          };
          strapi_assignee?: {
            id?: number;
            documentId?: string;
          };
        }[];
      strapi_stage?: {
        id?: number;
        documentId?: string;
      };
      strapi_assignee?: {
        id?: number;
        documentId?: string;
      };
    };
    RedirectResponse: {
      data?: components["schemas"]["Redirect"];
      meta?: Record<string, never>;
    };
    StandaloneEmailRequest: {
      data: {
        name: string;
        sender_name: string;
        /** Format: date */
        header_date: string;
        body: string;
        legacy_body?: unknown;
        locale?: string;
        localizations?: (number | string)[];
        /** @example string or id */
        strapi_stage?: number | string;
        /** @example string or id */
        strapi_assignee?: number | string;
        /** @enum {string} */
        stage?: "draft" | "modified" | "published";
        /** Format: date */
        shortPublishedAt?: string;
        previewId?: string;
        object_id?: string;
        relationLabel?: string;
      };
    };
    StandaloneEmailListResponse: {
      data?: components["schemas"]["StandaloneEmail"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    StandaloneEmail: {
      id?: number;
      documentId?: string;
      name: string;
      sender_name: string;
      /** Format: date */
      header_date: string;
      body: string;
      legacy_body?: unknown;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        id?: number;
        documentId?: string;
        firstname?: string;
        lastname?: string;
        username?: string;
        /** Format: email */
        email?: string;
        resetPasswordToken?: string;
        registrationToken?: string;
        isActive?: boolean;
        roles?: {
            id?: number;
            documentId?: string;
            name?: string;
            code?: string;
            description?: string;
            users?: {
                id?: number;
                documentId?: string;
              }[];
            permissions?: {
                id?: number;
                documentId?: string;
                action?: string;
                actionParameters?: unknown;
                subject?: string;
                properties?: unknown;
                conditions?: unknown;
                role?: {
                  id?: number;
                  documentId?: string;
                };
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                /** Format: date-time */
                publishedAt?: string;
                createdBy?: {
                  id?: number;
                  documentId?: string;
                };
                updatedBy?: {
                  id?: number;
                  documentId?: string;
                };
                locale?: string;
                localizations?: {
                    id?: number;
                    documentId?: string;
                  }[];
              }[];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              id?: number;
              documentId?: string;
            };
            updatedBy?: {
              id?: number;
              documentId?: string;
            };
            locale?: string;
            localizations?: {
                id?: number;
                documentId?: string;
              }[];
          }[];
        blocked?: boolean;
        preferedLanguage?: string;
        /** Format: date-time */
        createdAt?: string;
        /** Format: date-time */
        updatedAt?: string;
        /** Format: date-time */
        publishedAt?: string;
        createdBy?: {
          id?: number;
          documentId?: string;
        };
        updatedBy?: {
          id?: number;
          documentId?: string;
        };
        locale?: string;
        localizations?: {
            id?: number;
            documentId?: string;
          }[];
      };
      updatedBy?: {
        id?: number;
        documentId?: string;
      };
      locale?: string;
      localizations?: ({
          id?: number;
          documentId?: string;
          name?: string;
          sender_name?: string;
          /** Format: date */
          header_date?: string;
          body?: string;
          legacy_body?: unknown;
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          updatedAt?: string;
          /** Format: date-time */
          publishedAt?: string;
          createdBy?: {
            id?: number;
            documentId?: string;
          };
          updatedBy?: {
            id?: number;
            documentId?: string;
          };
          locale?: string;
          localizations?: {
              id?: number;
              documentId?: string;
            }[];
          strapi_stage?: {
            id?: number;
            documentId?: string;
            name?: string;
            color?: string;
            workflow?: {
              id?: number;
              documentId?: string;
              name?: string;
              stages?: {
                  id?: number;
                  documentId?: string;
                }[];
              stageRequiredToPublish?: {
                id?: number;
                documentId?: string;
              };
              contentTypes?: unknown;
              /** Format: date-time */
              createdAt?: string;
              /** Format: date-time */
              updatedAt?: string;
              /** Format: date-time */
              publishedAt?: string;
              createdBy?: {
                id?: number;
                documentId?: string;
              };
              updatedBy?: {
                id?: number;
                documentId?: string;
              };
              locale?: string;
              localizations?: {
                  id?: number;
                  documentId?: string;
                }[];
            };
            permissions?: {
                id?: number;
                documentId?: string;
              }[];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              id?: number;
              documentId?: string;
            };
            updatedBy?: {
              id?: number;
              documentId?: string;
            };
            locale?: string;
            localizations?: {
                id?: number;
                documentId?: string;
              }[];
          };
          strapi_assignee?: {
            id?: number;
            documentId?: string;
          };
          /** @enum {string} */
          stage?: "draft" | "modified" | "published";
          /** Format: date */
          shortPublishedAt?: string;
          previewId?: string;
          object_id?: string;
          relationLabel?: string;
        })[];
      strapi_stage?: {
        id?: number;
        documentId?: string;
      };
      strapi_assignee?: {
        id?: number;
        documentId?: string;
      };
      /** @enum {string} */
      stage?: "draft" | "modified" | "published";
      /** Format: date */
      shortPublishedAt?: string;
      previewId?: string;
      object_id?: string;
      relationLabel?: string;
    };
    StandaloneEmailResponse: {
      data?: components["schemas"]["StandaloneEmail"];
      meta?: Record<string, never>;
    };
    TagRequest: {
      data: {
        label: string;
        value: string;
        locale?: string;
        localizations?: (number | string)[];
        /** @example string or id */
        strapi_stage?: number | string;
        /** @example string or id */
        strapi_assignee?: number | string;
      };
    };
    TagListResponse: {
      data?: components["schemas"]["Tag"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    Tag: {
      id?: number;
      documentId?: string;
      label: string;
      value: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        id?: number;
        documentId?: string;
        firstname?: string;
        lastname?: string;
        username?: string;
        /** Format: email */
        email?: string;
        resetPasswordToken?: string;
        registrationToken?: string;
        isActive?: boolean;
        roles?: {
            id?: number;
            documentId?: string;
            name?: string;
            code?: string;
            description?: string;
            users?: {
                id?: number;
                documentId?: string;
              }[];
            permissions?: {
                id?: number;
                documentId?: string;
                action?: string;
                actionParameters?: unknown;
                subject?: string;
                properties?: unknown;
                conditions?: unknown;
                role?: {
                  id?: number;
                  documentId?: string;
                };
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                /** Format: date-time */
                publishedAt?: string;
                createdBy?: {
                  id?: number;
                  documentId?: string;
                };
                updatedBy?: {
                  id?: number;
                  documentId?: string;
                };
                locale?: string;
                localizations?: {
                    id?: number;
                    documentId?: string;
                  }[];
              }[];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              id?: number;
              documentId?: string;
            };
            updatedBy?: {
              id?: number;
              documentId?: string;
            };
            locale?: string;
            localizations?: {
                id?: number;
                documentId?: string;
              }[];
          }[];
        blocked?: boolean;
        preferedLanguage?: string;
        /** Format: date-time */
        createdAt?: string;
        /** Format: date-time */
        updatedAt?: string;
        /** Format: date-time */
        publishedAt?: string;
        createdBy?: {
          id?: number;
          documentId?: string;
        };
        updatedBy?: {
          id?: number;
          documentId?: string;
        };
        locale?: string;
        localizations?: {
            id?: number;
            documentId?: string;
          }[];
      };
      updatedBy?: {
        id?: number;
        documentId?: string;
      };
      locale?: string;
      localizations?: {
          id?: number;
          documentId?: string;
          label?: string;
          value?: string;
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          updatedAt?: string;
          /** Format: date-time */
          publishedAt?: string;
          createdBy?: {
            id?: number;
            documentId?: string;
          };
          updatedBy?: {
            id?: number;
            documentId?: string;
          };
          locale?: string;
          localizations?: {
              id?: number;
              documentId?: string;
            }[];
          strapi_stage?: {
            id?: number;
            documentId?: string;
            name?: string;
            color?: string;
            workflow?: {
              id?: number;
              documentId?: string;
              name?: string;
              stages?: {
                  id?: number;
                  documentId?: string;
                }[];
              stageRequiredToPublish?: {
                id?: number;
                documentId?: string;
              };
              contentTypes?: unknown;
              /** Format: date-time */
              createdAt?: string;
              /** Format: date-time */
              updatedAt?: string;
              /** Format: date-time */
              publishedAt?: string;
              createdBy?: {
                id?: number;
                documentId?: string;
              };
              updatedBy?: {
                id?: number;
                documentId?: string;
              };
              locale?: string;
              localizations?: {
                  id?: number;
                  documentId?: string;
                }[];
            };
            permissions?: {
                id?: number;
                documentId?: string;
              }[];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              id?: number;
              documentId?: string;
            };
            updatedBy?: {
              id?: number;
              documentId?: string;
            };
            locale?: string;
            localizations?: {
                id?: number;
                documentId?: string;
              }[];
          };
          strapi_assignee?: {
            id?: number;
            documentId?: string;
          };
        }[];
      strapi_stage?: {
        id?: number;
        documentId?: string;
      };
      strapi_assignee?: {
        id?: number;
        documentId?: string;
      };
    };
    TagResponse: {
      data?: components["schemas"]["Tag"];
      meta?: Record<string, never>;
    };
    UploadFile: {
      id?: number;
      name?: string;
      alternativeText?: string;
      caption?: string;
      /** Format: integer */
      width?: number;
      /** Format: integer */
      height?: number;
      formats?: number;
      hash?: string;
      ext?: string;
      mime?: string;
      /** Format: double */
      size?: number;
      url?: string;
      previewUrl?: string;
      provider?: string;
      provider_metadata?: Record<string, never>;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "Users-Permissions-Role": {
      id?: number;
      name?: string;
      description?: string;
      type?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "Users-Permissions-User": {
      /** @example 1 */
      id?: number;
      /** @example foo.bar */
      username?: string;
      /** @example foo.bar@strapi.io */
      email?: string;
      /** @example local */
      provider?: string;
      /** @example true */
      confirmed?: boolean;
      /** @example false */
      blocked?: boolean;
      /**
       * Format: date-time
       * @example 2022-06-02T08:32:06.258Z
       */
      createdAt?: string;
      /**
       * Format: date-time
       * @example 2022-06-02T08:32:06.267Z
       */
      updatedAt?: string;
    };
    "Users-Permissions-UserRegistration": {
      /** @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c */
      jwt?: string;
      user?: components["schemas"]["Users-Permissions-User"];
    };
    "Users-Permissions-PermissionsTree": {
      [key: string]: {
        /** @description every controller of the api */
        controllers?: {
          [key: string]: {
            [key: string]: {
              enabled?: boolean;
              policy?: string;
            };
          };
        };
      };
    };
  };
  responses: never;
  parameters: never;
  requestBodies: {
    "Users-Permissions-RoleRequest": {
      content: {
        /**
         * @example {
         *   "name": "foo",
         *   "description": "role foo",
         *   "permissions": {
         *     "api::content-type.content-type": {
         *       "controllers": {
         *         "controllerA": {
         *           "find": {
         *             "enabled": true
         *           }
         *         }
         *       }
         *     }
         *   }
         * }
         */
        "application/json": {
          name?: string;
          description?: string;
          type?: string;
          permissions?: components["schemas"]["Users-Permissions-PermissionsTree"];
        };
      };
    };
  };
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  "get/categories": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CategoryListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/categories": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CategoryRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CategoryResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/categories/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CategoryResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/categories/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CategoryRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CategoryResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/categories/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/events-page": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EventsPageResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/events-page": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EventsPageRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EventsPageResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/events-page": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/forms-and-documents-page": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FormsAndDocumentsPageResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/forms-and-documents-page": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["FormsAndDocumentsPageRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FormsAndDocumentsPageResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/forms-and-documents-page": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/home-page": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["HomePageResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/home-page": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["HomePageRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["HomePageResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/home-page": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/navigation": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["NavigationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/navigation": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NavigationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["NavigationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/navigation": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/newsletters": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["NewsletterListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/newsletters": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewsletterRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["NewsletterResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/newsletters/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["NewsletterResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/newsletters/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewsletterRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["NewsletterResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/newsletters/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/pages": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PageListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/pages": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PageRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PageResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/pages/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PageResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/pages/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PageRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PageResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/pages/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/posts": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PostListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/posts": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PostRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PostResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/posts/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PostResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/posts/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PostRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PostResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/posts/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/redirects": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RedirectListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/redirects": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RedirectRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RedirectResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/redirects/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RedirectResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/redirects/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RedirectRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RedirectResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/redirects/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/standalone-emails": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StandaloneEmailListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/standalone-emails": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["StandaloneEmailRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StandaloneEmailResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/standalone-emails/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StandaloneEmailResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/standalone-emails/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["StandaloneEmailRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StandaloneEmailResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/standalone-emails/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/tags": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: {
          [key: string]: unknown;
        };
        /** @description Locale to apply */
        locale?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TagListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/tags": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TagRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TagResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/tags/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TagResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/tags/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TagRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TagResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/tags/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
}

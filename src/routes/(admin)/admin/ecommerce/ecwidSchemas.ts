// Generated by ts-to-zod
import { z } from 'zod';

export const discountInfoSchema = z.object({
  value: z.number().optional(),
  type: z.union([z.literal('ABS'), z.literal('PERCENT')]).optional(),
  base: z
    .union([
      z.literal('ON_TOTAL'),
      z.literal('ON_MEMBERSHIP'),
      z.literal('ON_TOTAL_AND_MEMBERSHIP'),
      z.literal('CUSTOM'),
    ])
    .optional(),
  orderTotal: z.number().optional(),
  description: z.string().optional(),
});

export const refundsInfoSchema = z.object({
  date: z.coerce.date().optional(),
  source: z.string().optional(),
  reason: z.string().optional(),
  amount: z.number().optional(),
});

export const personSchema = z.object({
  name: z.string().optional(),
  companyName: z.string().optional(),
  street: z.string().optional(),
  city: z.string().optional(),
  countryCode: z.string().optional(),
  countryName: z.string().optional(),
  postalCode: z.string().optional(),
  stateOrProvinceCode: z.string().optional(),
  stateOrProvinceName: z.string().optional(),
  phone: z.string().optional(),
});

export const shippingOptionInfoSchema = z.object({
  shippingCarrierName: z.string().optional(),
  shippingMethodName: z.string().optional(),
  shippingRate: z.number().optional(),
  estimatedTransitTime: z.string().optional(),
  isPickup: z.boolean().optional(),
  pickupInstruction: z.string().optional(),
  fulfillmentType: z.union([z.literal('SHIPPING'), z.literal('PICKUP'), z.literal('DELIVERY')]),
});

export const handlingFeeInfoSchema = z.object({
  name: z.string().optional(),
  value: z.number().optional(),
  description: z.string().optional(),
});

export const predictedPackageSchema = z.object({
  length: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
  weight: z.number().optional(),
  declaredValue: z.number().optional(),
});

export const taxOnShippingSchema = z.object({
  name: z.string().optional(),
  value: z.number().optional(),
  total: z.number().optional(),
});

export const orderExtraFieldsSchema = z.object({
  id: z.string().optional(),
  value: z.string().optional(),
  customerInputType: z.string().optional(),
  title: z.string().optional(),
  orderDetailsDisplaySection: z.string().optional(),
  orderBy: z.string().optional(),
});

export const creditCardStatusSchema = z.object({
  avsMessage: z.string(),
  cvvMessage: z.string(),
});

export const discountCouponCatalogLimitSchema = z.object({
  products: z.array(z.number()).optional(),
  categories: z.array(z.number()).optional(),
});

export const dimensionsSchema = z.object({
  length: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

export const discountsSchema = z.object({
  discountInfo: discountInfoSchema.optional(),
  total: z.number().optional(),
});

export const taxesSchema = z.object({
  name: z.string().optional(),
  value: z.number().optional(),
  total: z.number().optional(),
  taxOnDiscountedSubtotal: z.number().optional(),
  taxOnShipping: z.number().optional(),
  includeInPrice: z.boolean().optional(),
});

export const selectionsSchema = z.object({
  selectionTitle: z.string().optional(),
  selectionModifier: z.number().optional(),
  selectionModifierType: z.string().optional(),
});

export const shippingAddressSchema = personSchema.extend({
  id: z.number().optional(),
});

export const attributeValueSchema = z.object({
  id: z.number().optional(),
  name: z.string().optional(),
  value: z.string().optional(),
  show: z.string().optional(),
  type: z
    .union([
      z.literal('CUSTOM'),
      z.literal('UPC'),
      z.literal('BRAND'),
      z.literal('GENDER'),
      z.literal('AGE_GROUP'),
      z.literal('COLOR'),
      z.literal('SIZE'),
      z.literal('PRICE_PER_UNIT'),
      z.literal('UNITS_IN_PRODUCT'),
    ])
    .optional(),
});

export const categoriesInfoSchema = z.object({
  id: z.number(),
  enabled: z.boolean().optional(),
});

export const translationsSchema = z.record(z.string());

export const productDimensionsSchema = z.object({
  length: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

export const productFileSchema = z.object({
  id: z.number(),
  name: z.string(),
  description: z.string(),
  size: z.number(),
  adminUrl: z.string(),
});

export const originalImageSchema = z.object({
  url: z.string().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

export const shippingSettingsSchema = z.object({
  type: z
    .union([
      z.literal('GLOBAL_METHODS'),
      z.literal('SELECTED_METHODS'),
      z.literal('FLAT_RATE'),
      z.literal('FREE_SHIPPING'),
    ])
    .optional(),
  methodMarkup: z.number().optional(),
  flatRate: z.number().optional(),
  disabledMethods: z.array(z.number()).optional(),
  enabledMethods: z.array(z.number()).optional(),
});

export const taxInfoSchema = z.object({
  taxable: z.boolean().optional(),
  enabledManualTaxes: z.array(z.number()),
  defaultLocationIncludedTaxRate: z.number().optional(),
});

export const wholesalePriceSchema = z.object({
  quantity: z.number(),
  price: z.number(),
});

export const optionValueSchema = z.object({
  nameTranslated: translationsSchema.optional(),
  value: z.string().optional(),
  valueTranslated: translationsSchema.optional(),
});

export const dominatingColorSchema = z.object({
  red: z.number().optional(),
  green: z.number().optional(),
  blue: z.number().optional(),
  alpha: z.number().optional(),
});

export const productImageSchema = z.object({
  id: z.string(),
  isMain: z.boolean().optional(),
  orderBy: z.number().optional(),
  image160pxUrl: z.string().optional(),
  image400pxUrl: z.string().optional(),
  image800pxUrl: z.string().optional(),
  image1500pxUrl: z.string().optional(),
  imageOriginalUrl: z.string().optional(),
});

export const relatedCategorySchema = z.object({
  enabled: z.boolean().optional(),
  categoryId: z.number().optional(),
  productCount: z.number().optional(),
});

export const productOptionChoiceSchema = z.object({
  text: z.string().optional(),
  textTranslated: translationsSchema.optional(),
  priceModifier: z.number().optional(),
  priceModifierType: z.union([z.literal('PERCENT'), z.literal('ABSOLUTE')]).optional(),
});

export const attributeSchema = z.object({
  id: z.number(),
  name: z.string().optional(),
  type: z.string().optional(),
  show: z.string().optional(),
});

export const deleteStatusSchema = z.object({
  deleteCount: z.number(),
});

export const updateStatusSchema = z.object({
  updateCount: z.number(),
});

export const createStatusSchema = z.object({
  id: z.number(),
  orderId: z.string().optional(),
});

export const discountCouponInfoSchema = z.object({
  id: z.number().optional(),
  name: z.string().optional(),
  code: z.string().optional(),
  discountType: z
    .union([
      z.literal('ABS'),
      z.literal('PERCENT'),
      z.literal('SHIPPING'),
      z.literal('ABS_AND_SHIPPING'),
      z.literal('PERCENT_AND_SHIPPING'),
    ])
    .optional(),
  status: z
    .union([z.literal('ACTIVE'), z.literal('PAUSED'), z.literal('EXPIRED'), z.literal('USEDUP')])
    .optional(),
  discount: z.number().optional(),
  launchDate: z.string().optional(),
  expirationDate: z.string(),
  usesLimit: z.string().optional(),
  applicationLimit: z.string().optional(),
  creationDate: z.string().optional(),
  updateDate: z.string().optional(),
  orderCount: z.number().optional(),
  catalogLimit: discountCouponCatalogLimitSchema.optional(),
});

export const selectedOptionsSchema = z.object({
  name: z.string().optional(),
  value: z.string().optional(),
  valuesArray: z.array(z.string()).optional(),
  selections: z.array(selectionsSchema).optional(),
  type: z.string().optional(),
});

export const customerSchema = z.object({
  id: z.number().optional(),
  name: z.string().optional(),
  email: z.string().optional(),
  registered: z.string().optional(),
  updated: z.string().optional(),
  totalOrderCount: z.number().optional(),
  customerGroupId: z.number().optional(),
  customerGroupName: z.string().optional(),
  billingPerson: personSchema.optional(),
  shippingAddresses: z.array(shippingAddressSchema).optional(),
  taxId: z.string().optional(),
  taxExempt: z.boolean().optional(),
  taxIdValid: z.boolean().optional(),
  acceptMarketing: z.boolean().optional(),
});

export const borderInfoSchema = z.object({
  dominatingColor: dominatingColorSchema.optional(),
  homogeneity: z.boolean().optional(),
});

export const variationSchema = z.object({
  id: z.number(),
  combinationNumber: z.number().optional(),
  options: z.array(optionValueSchema).optional(),
  sku: z.string().optional(),
  thumbnailUrl: z.string().optional(),
  imageUrl: z.string().optional(),
  smallThumbnailUrl: z.string().optional(),
  hdThumbnailUrl: z.string().optional(),
  originalImageUrl: z.string().optional(),
  quantity: z.number().optional(),
  unlimited: z.boolean().optional(),
  price: z.number().optional(),
  wholesalePrices: z.array(wholesalePriceSchema).optional(),
  weight: z.number().optional(),
  warningLimit: z.number().optional(),
  attributes: z.array(attributeValueSchema).optional(),
  compareToPrice: z.number().optional(),
});

export const galleryImagesSchema = z.object({
  id: z.number().optional(),
  url: z.string().optional(),
  thumbnail: z.string().optional(),
  originalImageUrl: z.string().optional(),
  imageUrl: z.string().optional(),
  hdThumbnailUrl: z.string().optional(),
  thumbnailUrl: z.string().optional(),
  smallThumbnailUrl: z.string().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
  orderBy: z.number().optional(),
  borderInfo: borderInfoSchema.optional(),
});

export const productMediaSchema = z.object({
  images: z.array(productImageSchema).optional(),
});

export const productOptionSchema = z.object({
  type: z.union([
    z.literal('SELECT'),
    z.literal('RADIO'),
    z.literal('CHECKBOX'),
    z.literal('TEXTFIELD'),
    z.literal('TEXTAREA'),
    z.literal('DATE'),
    z.literal('FILES'),
    z.literal('SIZE'),
  ]),
  name: z.string().optional(),
  nameTranslated: translationsSchema.optional(),
  choices: z.array(productOptionChoiceSchema).optional(),
  defaultChoice: z.number().optional(),
  required: z.boolean().optional(),
});

export const relatedProductsSchema = z.object({
  productIds: z.array(z.number()).optional(),
  relatedCategory: relatedCategorySchema.optional(),
});

export const productTypeSchema = z.object({
  id: z.number(),
  name: z.string().optional(),
  googleTaxonomy: z.string().optional(),
  attributes: z.array(attributeSchema).optional(),
});

export const orderItemSchema = z.object({
  categoryId: z.number().optional(),
  couponAmount: z.number().optional(),
  couponApplied: z.boolean().optional(),
  digital: z.boolean().optional(),
  dimensions: dimensionsSchema.optional(),
  discounts: z.array(discountsSchema).optional(),
  fixedShippingRate: z.number().optional(),
  fixedShippingRateOnly: z.boolean().optional(),
  hdThumbnailUrl: z.string().optional(),
  id: z.number().optional(),
  imageUrl: z.string().optional(),
  isShippingRequired: z.boolean().optional(),
  name: z.string().optional(),
  price: z.number().optional(),
  productId: z.number().optional(),
  productPrice: z.number().optional(),
  quantity: z.number().optional(),
  quantityInStock: z.number().optional(),
  selectedOptions: z.array(selectedOptionsSchema).optional(),
  shipping: z.number().optional(),
  shortDescription: z.string().optional(),
  sku: z.string().optional(),
  smallThumbnailUrl: z.string().optional(),
  tax: z.number().optional(),
  taxes: z.array(taxesSchema).optional(),
  trackQuantity: z.boolean().optional(),
  weight: z.number().optional(),
});

export const productSchema = z.object({
  attributes: z.array(attributeValueSchema).optional(),
  borderInfo: borderInfoSchema.optional(),
  categories: z.array(categoriesInfoSchema).optional(),
  categoryIds: z.array(z.number()).optional(),
  combinations: z.array(variationSchema).optional(),
  compareToPrice: z.number().optional(),
  compareToPriceDiscount: z.number().optional(),
  compareToPriceDiscountFormatted: z.string().optional(),
  compareToPriceDiscountPercent: z.number().optional(),
  compareToPriceDiscountPercentFormatted: z.string().optional(),
  compareToPriceFormatted: z.string().optional(),
  createTimestamp: z.number().optional(),
  created: z.string().optional(),
  defaultCategoryId: z.number().optional(),
  defaultCombinationId: z.number().optional(),
  defaultDisplayedPrice: z.number().optional(),
  defaultDisplayedPriceFormatted: z.string().optional(),
  description: z.string().optional(),
  descriptionTranslated: translationsSchema.optional(),
  dimensions: productDimensionsSchema.optional(),
  discountsAllowed: z.boolean().optional(),
  enabled: z.boolean().optional(),
  files: z.array(productFileSchema).optional(),
  fixedShippingRate: z.number().optional(),
  fixedShippingRateOnly: z.boolean().optional(),
  galleryImages: z.array(galleryImagesSchema).optional(),
  googleItemCondition: z.string().optional(),
  hdThumbnailUrl: z.string().optional(),
  id: z.number(),
  imageUrl: z.string().optional(),
  inStock: z.boolean().optional(),
  isGiftCard: z.boolean().optional(),
  isSampleProduct: z.boolean().optional(),
  isShippingRequired: z.boolean().optional(),
  media: productMediaSchema.optional(),
  name: z.string().optional(),
  nameTranslated: translationsSchema.optional(),
  nameYourPriceEnabled: z.boolean().optional(),
  options: z.array(productOptionSchema).optional(),
  originalImage: originalImageSchema.optional(),
  originalImageUrl: z.string().optional(),
  price: z.number().optional(),
  priceInProductList: z.number().optional(),
  productClassId: z.number().optional(),
  productCondition: z.string().optional(),
  relatedProducts: relatedProductsSchema.optional(),
  seoDescription: z.string().optional(),
  seoTitle: z.string().optional(),
  shipping: shippingSettingsSchema.optional(),
  showOnFrontpage: z.number().optional(),
  sku: z.string().optional(),
  smallThumbnailUrl: z.string().optional(),
  tax: taxInfoSchema.optional(),
  thumbnailUrl: z.string().optional(),
  unlimited: z.boolean().optional(),
  updateTimestamp: z.number().optional(),
  updated: z.string().optional(),
  url: z.string().optional(),
  warningLimit: z.number().optional(),
  weight: z.number().optional(),
  wholesalePrices: z.array(wholesalePriceSchema).optional(),
});

export const orderEntrySchema = z.object({
  id: z.string(),
  subtotal: z.number().optional(),
  total: z.number().optional(),
  usdTotal: z.number().optional(),
  tax: z.number().optional(),
  paymentMethod: z.string().optional(),
  paymentStatus: z
    .union([
      z.literal('AWAITING_PAYMENT'),
      z.literal('PAID'),
      z.literal('CANCELLED'),
      z.literal('REFUNDED'),
      z.literal('PARTIALLY_REFUNDED'),
      z.literal('INCOMPLETE'),
      z.literal('CUSTOM_PAYMENT_STATUS_1'),
      z.literal('CUSTOM_PAYMENT_STATUS_2'),
      z.literal('CUSTOM_PAYMENT_STATUS_3'),
    ])
    .optional(),
  fulfillmentStatus: z
    .union([
      z.literal('AWAITING_PROCESSING'),
      z.literal('PROCESSING'),
      z.literal('SHIPPED'),
      z.literal('DELIVERED'),
      z.literal('WILL_NOT_DELIVER'),
      z.literal('RETURNED'),
      z.literal('READY_FOR_PICKUP'),
      z.literal('OUT_FOR_DELIVERY'),
      z.literal('CUSTOM_FULFILLMENT_STATUS_1'),
      z.literal('CUSTOM_FULFILLMENT_STATUS_2'),
      z.literal('CUSTOM_FULFILLMENT_STATUS_3'),
    ])
    .optional(),
  vendorOrderNumber: z.string().optional(),
  orderNumber: z.number().optional(),
  refererUrl: z.string().optional(),
  globalReferer: z.string().optional(),
  createDate: z.coerce.date().optional(),
  updateDate: z.coerce.date().optional(),
  createTimestamp: z.number().optional(),
  updateTimestamp: z.number().optional(),
  hidden: z.boolean().optional(),
  orderComments: z.string().optional(),
  privateAdminNotes: z.string().optional(),
  email: z.string().optional(),
  ipAddress: z.string().optional(),
  customerId: z.number().optional(),
  customerGroupId: z.number().optional(),
  customerGroup: z.string().optional(),
  customerTaxExempt: z.boolean().optional(),
  customerTaxId: z.string().optional(),
  customerTaxIdValid: z.boolean().optional(),
  reversedTaxApplied: z.boolean().optional(),
  discount: z.number().optional(),
  couponDiscount: z.number().optional(),
  volumeDiscount: z.number().optional(),
  membershipBasedDiscount: z.number().optional(),
  totalAndMembershipBasedDiscount: z.number().optional(),
  discountCoupon: discountCouponInfoSchema.optional(),
  discountInfo: z.array(discountInfoSchema).optional(),
  items: z.array(orderItemSchema).optional(),
  refundedAmount: z.number().optional(),
  refunds: z.array(refundsInfoSchema).optional(),
  billingPerson: personSchema.optional(),
  shippingPerson: personSchema.optional(),
  shippingOption: shippingOptionInfoSchema.optional(),
  handlingFee: handlingFeeInfoSchema.optional(),
  predictedPackages: predictedPackageSchema.array().optional(),
  taxesOnShipping: z.array(taxOnShippingSchema).optional(),
  paymentModule: z.string().optional(),
  paymentParams: z.record(z.string()).optional(),
  additionalInfo: z.record(z.string()).optional(),
  orderExtraFields: z.array(orderExtraFieldsSchema).optional(),
  acceptMarketing: z.boolean().optional(),
  refererId: z.string().optional(),
  disableAllCustomerNotifications: z.boolean().optional(),
  externalFulfillment: z.boolean().optional(),
  trackingNumber: z.string().optional(),
  paymentMessage: z.string().optional(),
  externalTransactionId: z.string().optional(),
  affiliateId: z.string().optional(),
  creditCardStatus: creditCardStatusSchema.optional(),
  externalOrderId: z.string().optional(),
});

export const ordersSchema = z.object({
  total: z.number(),
  count: z.number(),
  offset: z.number(),
  limit: z.number(),
  items: orderEntrySchema.array(),
});
